import{_ as e,o as t,c as o,N as a}from"./chunks/framework.60272d8a.js";const h=JSON.parse('{"title":"进程？线程？有什么区别？","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/Linux/进程？线程？有什么区别.md","lastUpdated":1706686109000}'),l={name:"knowledge/Linux/进程？线程？有什么区别.md"},i=a('<h1 id="进程-线程-有什么区别" tabindex="-1">进程？线程？有什么区别？ <a class="header-anchor" href="#进程-线程-有什么区别" aria-label="Permalink to &quot;进程？线程？有什么区别？&quot;">​</a></h1><h2 id="进程" tabindex="-1">进程 <a class="header-anchor" href="#进程" aria-label="Permalink to &quot;进程&quot;">​</a></h2><p>进程是操作系统中最核心的概念，是对正在运行中的程序的一个抽象，是系统进行资源分配和调度的基本单位。操作系统的其他所有内容都是围绕着进程展开的，<code>CPU</code>负责执行这些任务。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5dc8c3e4c6014b27bfe9dab842698fec~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt=""></p><p>进程是一种抽象的概念，一般由程序、数据集合和进程控制块三部分组成：</p><ul><li>程序用于描述进程要完成的功能，是控制进程执行的指令集</li><li>数据集合是程序在执行时所需要的数据和工作区</li><li>程序控制块，包含进程的描述信息和控制信息，是进程存在的唯一标志</li></ul><h2 id="线程" tabindex="-1">线程 <a class="header-anchor" href="#线程" aria-label="Permalink to &quot;线程&quot;">​</a></h2><p><strong>线程</strong>（thread）是操作系统能够进行<strong>运算调度</strong>的最小单位，是进程中的一个执行任务（控制单元），负责当前进程中程序的执行</p><p>一个进程至少有一个线程，一个进程可以运行多个线程，这些线程共享同一块内存，线程之间可以共享对象、资源，如果有冲突或需要协同，还可以随时沟通以解决冲突或保持同步</p><blockquote><p>举个例子，假设你经营着一家物业管理公司。最初，业务量很小，事事都需要你亲力亲为。给老张家修完暖气管道，立马再去老李家换电灯泡——这叫单线程，所有的工作都得顺序执行</p><p>后来业务拓展了，你雇佣了几个工人，这样，你的物业公司就可以同时为多户人家提供服务了——这叫多线程，你是主线程</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b380661d39504bb7af1b369ba040cb2e~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt=""></p></blockquote><p>但实际上，并不是线程越多，进程的工作效率越高，这是因为在一个进程内，不管你创建了多少线程，它们总是被限定在一颗<code>CPU</code>内，或者多核<code>CPU</code>的一个核内</p><p>这意味着，多线程在宏观上是并行的，在微观上则是分时切换串行的，多线程编程无法充分发挥多核计算资源的优势</p><p>这导致使用多线程做任务并行处理时，线程数量超过一定数值后，线程越多速度反倒越慢的原因</p><h2 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h2><ul><li><strong>本质区别</strong>：进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位</li><li><strong>在开销方面</strong>：每个进程都有独立的代码和数据空间（程序上下文），程序之间的切换会有较大的开销；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），线程之间切换的开销小</li><li><strong>所处环境</strong>：在操作系统中能同时运行多个进程（程序）；而在同一个进程（程序）中有多个线程同时执行（通过CPU调度，在每个时间片中只有一个线程执行）</li><li><strong>内存分配方面</strong>：系统在运行的时候会为每个进程分配不同的内存空间；而对线程而言，除了CPU外，系统不会为线程分配内存（线程所使用的资源来自其所属进程的资源），线程组之间只能共享资源</li><li><strong>包含关系</strong>：没有线程的进程可以看做是单线程的，如果一个进程内有多个线程，则执行过程不是一条线的，而是多条线（线程）共同完成的；线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程</li></ul><blockquote><p>举个例子：进程=火车，线程=车厢</p><ul><li>线程在进程下行进（单纯的车厢无法运行）</li><li>一个进程可以包含多个线程（一辆火车可以有多个车厢）</li><li>不同进程间数据很难共享（一辆火车上的乘客很难换到另外一辆火车，比如站点换乘）</li><li>同一进程下不同线程间数据很易共享（A车厢换到B车厢很容易）</li><li>进程要比线程消耗更多的计算机资源（采用多列火车相比多个车厢更耗资源）</li><li>进程间不会相互影响，一个线程挂掉将导致整个进程挂掉（一列火车不会影响到另外一列火车，但是如果一列火车上中间的一节车厢着火了，将影响到所有车厢）</li></ul></blockquote>',16),r=[i];function c(n,p,s,d,_,u){return t(),o("div",null,r)}const f=e(l,[["render",c]]);export{h as __pageData,f as default};
