import{_ as e,o as a,c as o,N as l}from"./chunks/framework.60272d8a.js";const m=JSON.parse('{"title":"MongoDB - 增删改查 - 程序员翔仔 - 博客园","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/数据库/MongoDB增删改查.md","lastUpdated":1706686109000}'),n={name:"knowledge/数据库/MongoDB增删改查.md"},t=l(`<h1 id="mongodb-增删改查-程序员翔仔-博客园" tabindex="-1">MongoDB - 增删改查 - 程序员翔仔 - 博客园 <a class="header-anchor" href="#mongodb-增删改查-程序员翔仔-博客园" aria-label="Permalink to &quot;MongoDB - 增删改查 - 程序员翔仔 - 博客园&quot;">​</a></h1><h2 id="连接" tabindex="-1">连接 <a class="header-anchor" href="#连接" aria-label="Permalink to &quot;连接&quot;">​</a></h2><h3 id="标准-uri-连接语法" tabindex="-1">标准 URI 连接语法 <a class="header-anchor" href="#标准-uri-连接语法" aria-label="Permalink to &quot;标准 URI 连接语法&quot;">​</a></h3><p>通常，可以设定标准的 URI 连接语法，作为连接配置：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>mongodb://</code>: 固定的格式，即指定当前的 URI 是标准的 MongoDB 连接语法</li><li><code>username:password@</code>: 可选项，如果设置，在连接数据库服务器之后，驱动会尝试登录这个数据库</li><li><code>host1</code>: 必须的，至少指定一个 host，它指定了要连接服务器的地址。如果要连接副本及集，需要指定多个主机地址</li><li><code>portX</code>: 可选的指定端口，如果不填，默认为 <code>27017</code></li><li><code>/database</code>: 如果指定账号和密码，连接并验证登录指定数据库。若不指定，默认打开 test 数据库</li><li><code>?options</code>: 连接选项，如果没有指定数据库，则前面需要加上 <code>/</code>。所有连接选项都是键值对 <code>name=value</code>，键值对之间通过 <code>&amp;</code> 或 <code>;</code> 隔开</li></ul><h3 id="连接选项" tabindex="-1">连接选项 <a class="header-anchor" href="#连接选项" aria-label="Permalink to &quot;连接选项&quot;">​</a></h3><p>标准的连接格式包含了多个选项，如下所示：</p><ul><li><code>replicaSet=name</code>: 验证副本集的名称</li><li><code>slaveOk=true|false</code>: 选择连接主服务器的方式 <ul><li><code>true</code>: 表示有从服务器，当 <code>connect=direct</code> 时会连接第一台机器，即使这台不是主服务器；当 <code>connect=replicaSet</code> 时会发送所有的写请求到主并且把读请求分布在其他从服务器</li><li><code>false</code>: 表示无从服务器，当 <code>connect=direct</code> 时会自动找寻主服务器；当 <code>connect=replicaSet</code> 时仅连接主服务器，并且所有的读写命令都连接到主服务器</li></ul></li><li><code>safe=true|false</code>: 设置为 <code>true</code> 时，在执行更新操作之后，驱动都会发送 <code>getLastError</code> 命令来确保更新成功</li><li><code>w=n</code>: 驱动添加 <code>{w: n}</code> 到 <code>getLastError</code> 命令，应用于 <code>safe=true</code></li><li><code>wtimeoutMS=ms</code>: 驱动添加 <code>{wtimeout: ms}</code> 到 <code>getLastError</code> 命令，应用于 <code>safe=true</code></li><li><code>fsync=true|false</code>: 驱动添加 <code>{fsync: true}</code> 到 <code>getLastError</code> 命令，应用于 <code>safe=true</code></li><li><code>journal=true|false</code>: 如果设置为 <code>true</code>，同步到日志（在提交到数据库前写入到实体中），应用于 <code>safe=true</code></li><li><code>connectTimeoutMS=ms</code>: 可以打开连接的时间</li><li><code>socketTimeoutMS=ms</code>: 发送和接受 socket 的时间</li></ul><h3 id="连接命令格式" tabindex="-1">连接命令格式 <a class="header-anchor" href="#连接命令格式" aria-label="Permalink to &quot;连接命令格式&quot;">​</a></h3><p>使用 mongosh 连接 MongoDB 时，也支持命令选项的方式添加配置：</p><ul><li><code>--host arg</code>: 指定数据库地址</li><li><code>--port arg</code>: 指定数据库端口</li><li><code>-u [ --username ] arg</code>: 鉴权的账号</li><li><code>-p [ --password ] arg</code>: 鉴权的密码</li></ul><h2 id="插入文档" tabindex="-1">插入文档 <a class="header-anchor" href="#插入文档" aria-label="Permalink to &quot;插入文档&quot;">​</a></h2><h3 id="插入校验" tabindex="-1">插入校验 <a class="header-anchor" href="#插入校验" aria-label="Permalink to &quot;插入校验&quot;">​</a></h3><p>MongoDB 会对要插入的数据进行最基本的检查：检查文档的基本结构，如缺少 <code>_id</code> 键会自动添加一个、是否包含非 UTF-8 字符、是否使用了无法识别的类型、检查文档大小等。</p><p>其中，检查文档大小主要因为 MongoDB 限制了所有文档必须小于 16MB，主要是为了防止不良的模式设计并确保性能上的一致。</p><p>要查看文档的 BSON 大小，可以在 shell 中执行 <code>Object.bsonsize(doc)</code> 查看字节大小。</p><h3 id="单个插入" tabindex="-1">单个插入 <a class="header-anchor" href="#单个插入" aria-label="Permalink to &quot;单个插入&quot;">​</a></h3><p>官方文档：<a href="https://docs.mongodb.com/manual/reference/method/db.collection.insertOne/" target="_blank" rel="noreferrer">db.collection.insertOne() — MongoDB Manual</a></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">db.collection.insertOne(    &lt;document&gt;,    {        writeConcern: &lt;document&gt;    })</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="批量插入" tabindex="-1">批量插入 <a class="header-anchor" href="#批量插入" aria-label="Permalink to &quot;批量插入&quot;">​</a></h3><p>官方文档：<a href="https://docs.mongodb.com/manual/reference/method/db.collection.insertMany/" target="_blank" rel="noreferrer">db.collection.insertMany() — MongoDB Manual</a></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">db.collection.insertMany(    [ &lt;document 1&gt; , &lt;document 2&gt;, ... ],    {        writeConcern: &lt;document&gt;,        ordered: &lt;boolean&gt;     })</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>通过传输 <code>ordered=true</code> 可以确保文档按提供的顺序插入，指定为 <code>false</code> 则允许 MongoDB 重新排列插入的顺序以提高性能，默认为 <code>true</code> 值。</p><p>以有序插入的方式使用 <code>insertMany</code> 出现错误将会阻塞后续的插入动作，无需插入的方式则不管其他插入是否出现了错误。</p><h2 id="删除文档" tabindex="-1">删除文档 <a class="header-anchor" href="#删除文档" aria-label="Permalink to &quot;删除文档&quot;">​</a></h2><h3 id="单个删除" tabindex="-1">单个删除 <a class="header-anchor" href="#单个删除" aria-label="Permalink to &quot;单个删除&quot;">​</a></h3><p>官方文档：<a href="https://docs.mongodb.com/manual/reference/method/db.collection.deleteOne/" target="_blank" rel="noreferrer">db.collection.deleteOne() — MongoDB Manual</a></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">db.collection.deleteOne(    &lt;filter&gt;,    {         writeConcern: &lt;document&gt;,         collation: &lt;document&gt;,         hint: &lt;document|string&gt;    // Available starting in MongoDB 4.4    })</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>使用 <code>hint</code> 参数可以指定 <code>filter</code> 查询时命中的索引，这对于复杂的索引结构时可以提升部分效率。</p><h3 id="批量删除" tabindex="-1">批量删除 <a class="header-anchor" href="#批量删除" aria-label="Permalink to &quot;批量删除&quot;">​</a></h3><p>官方文档：<a href="https://docs.mongodb.com/manual/reference/method/db.collection.deleteMany/" target="_blank" rel="noreferrer">db.collection.deleteMany() — MongoDB Manual</a></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">db.collection.deleteMany(    &lt;filter&gt;,    {         writeConcern: &lt;document&gt;,         collation: &lt;document&gt;,         hint: &lt;document|string&gt;    // Available starting in MongoDB 4.4    })</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="单个删除并返回" tabindex="-1">单个删除并返回 <a class="header-anchor" href="#单个删除并返回" aria-label="Permalink to &quot;单个删除并返回&quot;">​</a></h3><p>官方文档：<a href="https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndDelete/" target="_blank" rel="noreferrer">db.collection.findOneAndDelete() — MongoDB Manual</a></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">db.collection.findOneAndDelete(    &lt;filter&gt;,    {        writeConcern: &lt;document&gt;,        projection: &lt;document&gt;,        sort: &lt;document&gt;,        maxTimeMS: &lt;number&gt;,        collation: &lt;document&gt;    })</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="更新文档" tabindex="-1">更新文档 <a class="header-anchor" href="#更新文档" aria-label="Permalink to &quot;更新文档&quot;">​</a></h2><p>更新文档是原子操作：如果两个更新同时发生，那么首先到达服务器的更新会先被执行，然后再执行下一个更新。</p><p>因此，相互冲突的更新可以安全地迅速接连完成，而不会破坏任何文档：最后一次更新将“成功”。如果不想使用默认行为，则可以考虑使用文档版本控制模式。</p><h3 id="单个更新" tabindex="-1">单个更新 <a class="header-anchor" href="#单个更新" aria-label="Permalink to &quot;单个更新&quot;">​</a></h3><p>官方文档：<a href="https://docs.mongodb.com/manual/reference/method/db.collection.updateOne/" target="_blank" rel="noreferrer">db.collection.updateOne() — MongoDB Manual</a></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">db.collection.updateOne(    &lt;filter&gt;,    &lt;update&gt;,    {        upsert: &lt;boolean&gt;,        writeConcern: &lt;document&gt;,        collation: &lt;document&gt;,        arrayFilters: [ &lt;filterdocument1&gt;, ... ],        hint:  &lt;document|string&gt;    // Available starting in MongoDB 4.2.1    })</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在更新文档的时候，比较需要注意的事 <code>upsert</code> 的使用，其是一种特殊类型的更新：如果找不到与筛选条件相匹配的文档，则会以这个条件和更新文档为基础来创建一个新文档；如果找到了匹配的文档，则进行正常的更新。</p><p>因此，使用 <code>upsert</code> 的好处就是，可以使用同一套代码创建和更新文档。</p><p>使用 <code>upsert</code> 时就涉及到一个 <code>$setOnInsert</code> 运算符，它的作用是，只会在插入文档时设置字段的值，在后续的更新时不对其进行更改。</p><h3 id="批量更新" tabindex="-1">批量更新 <a class="header-anchor" href="#批量更新" aria-label="Permalink to &quot;批量更新&quot;">​</a></h3><p>官方文档：<a href="https://docs.mongodb.com/manual/reference/method/db.collection.updateMany/" target="_blank" rel="noreferrer">db.collection.updateMany() — MongoDB Manual</a></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">db.collection.updateMany(    &lt;filter&gt;,    &lt;update&gt;,    {        upsert: &lt;boolean&gt;,        writeConcern: &lt;document&gt;,        collation: &lt;document&gt;,        arrayFilters: [ &lt;filterdocument1&gt;, ... ],        hint:  &lt;document|string&gt;    // Available starting in MongoDB 4.2.1    })</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="单个替换" tabindex="-1">单个替换 <a class="header-anchor" href="#单个替换" aria-label="Permalink to &quot;单个替换&quot;">​</a></h3><p>官方文档：<a href="https://www.mongodb.com/docs/manual/reference/method/db.collection.replaceOne/" target="_blank" rel="noreferrer">db.collection.replaceOne() — MongoDB Manual</a></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">db.collection.replaceOne(    &lt;filter&gt;,    &lt;replacement&gt;,    {        upsert: &lt;boolean&gt;,        writeConcern: &lt;document&gt;,        collation: &lt;document&gt;,        hint: &lt;document|string&gt;     // Available starting in 4.2.1    })</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>replaceOne</code> 和 <code>updateOne</code> 操作的区别在于，<code>updateOne</code> 可以更新文档中部分键的值，而 <code>replaceOne</code> 的作用是直接将整个文档都替换掉，通常是建议使用 <code>updateOne</code> 而不是 <code>replaceOne</code>。</p><h3 id="单个更新并返回" tabindex="-1">单个更新并返回 <a class="header-anchor" href="#单个更新并返回" aria-label="Permalink to &quot;单个更新并返回&quot;">​</a></h3><p>官方文档：<a href="https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndUpdate/" target="_blank" rel="noreferrer">db.collection.findOneAndUpdate() — MongoDB Manual</a></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">db.collection.findOneAndUpdate(    &lt;filter&gt;,    &lt;update document or aggregation pipeline&gt;,  // Changed in MongoDB 4.2    {        projection: &lt;document&gt;,        sort: &lt;document&gt;,        maxTimeMS: &lt;number&gt;,        upsert: &lt;boolean&gt;,        returnDocument: &lt;string&gt;,        returnNewDocument: &lt;boolean&gt;,        collation: &lt;document&gt;,        arrayFilters: [ &lt;filterdocument1&gt;, ... ]    })</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>使用 <code>findOneAndUpdate</code> 而不是 <code>updateOne</code> 的最大目的莫过于使用 <code>findOneAndUpdate</code> 可以返回更新前后文档内容。</p><p>通过设置 <code>returnNewDocument</code> 的值为 <code>true</code> 可以返回更新后的文档，为 <code>false</code> 时可以返回更新前的文档。</p><h3 id="单个替换并返回" tabindex="-1">单个替换并返回 <a class="header-anchor" href="#单个替换并返回" aria-label="Permalink to &quot;单个替换并返回&quot;">​</a></h3><p>官方文档：<a href="https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndReplace/" target="_blank" rel="noreferrer">db.collection.findOneAndReplace() — MongoDB Manual</a></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">db.collection.findOneAndReplace(    &lt;filter&gt;,    &lt;replacement&gt;,    {        projection: &lt;document&gt;,        sort: &lt;document&gt;,        maxTimeMS: &lt;number&gt;,        upsert: &lt;boolean&gt;,        returnDocument: &lt;string&gt;,        returnNewDocument: &lt;boolean&gt;,        collation: &lt;document&gt;    })</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="更新运算符" tabindex="-1">更新运算符 <a class="header-anchor" href="#更新运算符" aria-label="Permalink to &quot;更新运算符&quot;">​</a></h3><p>官方文档：<a href="https://docs.mongodb.com/manual/reference/operator/update/" target="_blank" rel="noreferrer">Update Operators — MongoDB Manual</a></p><p>对于如 <code>updateOne</code>、<code>updateMany</code>、<code>findOneAndUpdate</code> 等更新操作，MongoDB 提供了原子的更新运算符支持只更新部分数据。</p><p>运算符支持以 <code>{ &lt;operator&gt;: { &lt;field&gt;: &lt;value&gt;,... } }</code> 的方式使用，并且可以同时使用多个运算符。</p><p>为避免出现歧义，不建议对同一个属性同时使用不同的运算符。</p><h4 id="字段" tabindex="-1">字段 <a class="header-anchor" href="#字段" aria-label="Permalink to &quot;字段&quot;">​</a></h4><ul><li><code>$currentDate</code>: 将指定键设置为当前时间</li><li><code>$inc</code>: 对数字类型的键做递增操作</li><li><code>$min</code>: 会比较原始值和更新值，并设置成较小值</li><li><code>$max</code>: 会比较原始值和更新值，并设置成较大值</li><li><code>$mul</code>: 对数字类型的键做乘法操作</li><li><code>$rename</code>: 修改指定键的名称</li><li><code>$set</code>: 将指定键设置为指定值</li><li><code>$setOnInsert</code>: 与 <code>upsert</code> 配合使用，如果更新导致文档插入，则设置字段的值，对修改现有文档的更新操作无效</li><li><code>$unset</code>: 删除指定键</li></ul><h4 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h4><ul><li><code>$</code>: 充当占位符，更新与查询条件匹配的第一个元素</li><li><code>$[]</code>: 充当占位符，为匹配查询条件的文档更新数组中的所有元素</li><li><code>$[&lt;identifier&gt;]</code>: 充当占位符，为匹配查询条件的文档更新与 <code>arrayFilters</code> 条件匹配的所有元素</li><li><code>$addToSet</code>: 仅当集合中不存在该元素时，才将元素添加到数组中</li><li><code>$pop</code>: 传 <code>{ $pop: { field: 1 } }</code> 表示删除数组中的最后一项，传 <code>-1</code> 时表示删除第一项</li><li><code>$pull</code>: 删除与指定查询匹配的所有数组元素</li><li><code>$push</code>: 新增一项到数组中</li><li><code>$pullAll</code>: 删除列出的所有数组元素</li></ul><h4 id="数组内层" tabindex="-1">数组内层 <a class="header-anchor" href="#数组内层" aria-label="Permalink to &quot;数组内层&quot;">​</a></h4><ul><li><code>$each</code>: 使用 <code>$push</code> 或 <code>$addToSet</code> 运算符时，增加此运算符可以批量添加元素</li><li><code>$position</code>: 与 <code>$each</code> 配合使用，可以指定添加元素的位置</li><li><code>$slice</code>: 与 <code>$each</code> 配合使用，防止数组的增长超过某个大小，传正数表示从左到右截断</li><li><code>$sort</code>: 与 <code>$each</code> 配合使用，对添加完元素的数组进行排序</li></ul><h4 id="位运算" tabindex="-1">位运算 <a class="header-anchor" href="#位运算" aria-label="Permalink to &quot;位运算&quot;">​</a></h4><p><code>$bit</code>: 支持对整数值进行按位 <code>AND</code>、<code>OR</code> 或 <code>XOR</code> 更新，通过使用 <code>{ $bit: { &lt;field&gt;: { &lt;and|or|xor&gt;: &lt;int&gt; } } }</code> 完成更新。</p><h2 id="批量写操作" tabindex="-1">批量写操作 <a class="header-anchor" href="#批量写操作" aria-label="Permalink to &quot;批量写操作&quot;">​</a></h2><p>官方文档：<a href="https://docs.mongodb.com/manual/reference/method/db.collection.bulkWrite/" target="_blank" rel="noreferrer">db.collection.bulkWrite() — MongoDB Manual</a></p><p>MongoDB 提供了 <code>bulkwrite</code> 命令支持批量执行命令，批处理时在一定程度上减少了网络交互的损耗。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">db.collection.bulkWrite(    [ &lt;operation 1&gt;, &lt;operation 2&gt;, ... ],    {         writeConcern: &lt;document&gt;,         ordered: &lt;boolean&gt;    })</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>支持的以下操作：</p><ul><li><code>insertOne</code></li><li><code>updateOne</code></li><li><code>updateMany</code></li><li><code>replaceOne</code></li><li><code>deleteOne</code></li><li><code>deleteMany</code></li></ul><h2 id="查询文档" tabindex="-1">查询文档 <a class="header-anchor" href="#查询文档" aria-label="Permalink to &quot;查询文档&quot;">​</a></h2><h3 id="单个查询" tabindex="-1">单个查询 <a class="header-anchor" href="#单个查询" aria-label="Permalink to &quot;单个查询&quot;">​</a></h3><p>官方文档：<a href="https://docs.mongodb.com/manual/reference/method/db.collection.findOne/" target="_blank" rel="noreferrer">db.collection.findOne() — MongoDB Manual</a></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">db.collection.findOne(query, projection, options)</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>第一个参数是查询条件，可以使用键值对的方式指定需要匹配的条件，多个键之间是 <code>AND</code> 的关系。</p><p>第二个参数用于仅返回指定的键，既可以节省网络传输的数据量，也可以减少客户端解码文档的时间和内存消耗。</p><p>第三个参数可以指定查询到可选项，这些选项会修改查询行为和返回结果的方式。更多查看 <a href="https://mongodb.github.io/node-mongodb-native/4.0//interfaces/findoptions.html" target="_blank" rel="noreferrer">官方文档</a>。</p><h3 id="批量查询" tabindex="-1">批量查询 <a class="header-anchor" href="#批量查询" aria-label="Permalink to &quot;批量查询&quot;">​</a></h3><p>官方文档：<a href="https://docs.mongodb.com/manual/reference/method/db.collection.find/" target="_blank" rel="noreferrer">db.collection.find() — MongoDB Manual</a></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">db.collection.find(query, projection, options)</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>数据库会使用游标返回 <code>find</code> 的执行结果。</p><p>对于游标，客户端可以限制结果的数量，跳过一些结果，按任意方向的任意键组合对结果进行排序等操作。更多查询 <a href="https://www.mongodb.com/docs/manual/reference/method/db.collection.find/#available-mongosh-cursor-methods" target="_blank" rel="noreferrer">官方文档</a>。</p><p>下述是一些常用的游标方法：</p><ul><li><code>count()</code>: 统计游标引用的文档数量</li><li><code>hasNext()</code>: 查询是否有下一个结果</li><li><code>hint(index)</code>: 指定游标命中的索引</li><li><code>limit(number)</code>: 限制返回结果的数量</li><li><code>next()</code>: 返回下一个搜索结果</li><li><code>size()</code>: 返回应用 <code>skip()</code> 和 <code>limit()</code> 之后的查询数量</li><li><code>skip(number)</code>: 控制跳过一定的数量，跳过大量数据会比较慢</li><li><code>sort(sort)</code>: 使用键值对的方式对搜索结果进行排序</li></ul><p>在服务器端，游标会占用内存的资源。通常在以下情况会终止游标及进行随后的清理：</p><ul><li>当游标遍历完成匹配的结果时，它会清除自身</li><li>当游标超出客户端的作用域时，驱动程序会向数据库发送终止游标的信号</li><li>当游标达到 10 分钟没有使用时，数据库游标会被自动销毁</li></ul><h3 id="查询运算符" tabindex="-1">查询运算符 <a class="header-anchor" href="#查询运算符" aria-label="Permalink to &quot;查询运算符&quot;">​</a></h3><p>官方文档：<a href="https://docs.mongodb.com/manual/reference/operator/query/" target="_blank" rel="noreferrer">Query and Projection Operators — MongoDB Manual</a></p><p>同样的，设置查询条件时，MongoDB 提供了查询运算符支持更多的查询方式。</p><h4 id="比较运算符" tabindex="-1">比较运算符 <a class="header-anchor" href="#比较运算符" aria-label="Permalink to &quot;比较运算符&quot;">​</a></h4><ul><li><code>$eq</code>: 返回等于指定值的结果，等同 <code>{ &lt;field&gt;: &lt;value&gt; }</code> 的显式表示</li><li><code>$gt</code>: 返回大于指定值的结果</li><li><code>$gte</code>: 返回大于等于指定值的结果</li><li><code>$in</code>: 返回等于指定数组中任意一个值的结果，对于一个键匹配多个值，<code>$in</code> 比 <code>$or</code> 更方便</li><li><code>$lt</code>: 返回小于指定值的结果</li><li><code>$lte</code>: 返回小于等于指定值的结果</li><li><code>$ne</code>: 返回不等于指定值的结果</li><li><code>$nin</code>: 返回不等于指定数组中任意一个值的结果</li></ul><h4 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h4><ul><li><code>$and</code>: 返回同时符合查询子句要求的结果</li><li><code>$not</code>: 元运算符，匹配不符合查询语句要求的结果</li><li><code>$nor</code>: 返回不能同时符合查询子句要求的结果</li><li><code>$or</code>: 返回与任意一个查询子句的条件匹配的结果</li></ul><p>对于普通的 <code>$and</code> 类型查询，我们总是希望尽可能用最少的参数来限定结果的范围。而 <code>$or</code> 类型查询则相反，如果第一个参数能够匹配尽可能多的文档，则其效率最高。</p><h4 id="元素运算符" tabindex="-1">元素运算符 <a class="header-anchor" href="#元素运算符" aria-label="Permalink to &quot;元素运算符&quot;">​</a></h4><ul><li><code>$exists</code>: 判断指定键是否存在，返回符合要求的结果</li><li><code>$type</code>: 判断指定键的数据类型，返回符合要求的结果（好的模式设计不应该出现不同类型）</li></ul><h4 id="表达式运算符" tabindex="-1">表达式运算符 <a class="header-anchor" href="#表达式运算符" aria-label="Permalink to &quot;表达式运算符&quot;">​</a></h4><ul><li><code>$expr</code>: 允许使用聚合表达式，适合用在一些比较复杂的查询语句</li><li><code>$jsonSchema</code>: 根据给定的 JSON 模式验证文档，返回符合要求的结果</li><li><code>$mod</code>: 指定键的值执行模运算，返回符合要求的结果</li><li><code>$regex</code>: 使用正则表达式对指定键做匹配，MongoDB 可以利用索引来查询前缀正则表达式，但不能用于不区分大小写的搜索</li><li><code>$text</code>: 对使用文本索引的字段内容执行文本搜索，可以作为一个简易的搜索引擎使用</li><li><code>$where</code>: 允许在查询时执行任意 JavaScript 代码（性能较差，尽可能使用 <code>$expr</code> 代替）</li></ul><h4 id="数组运算符" tabindex="-1">数组运算符 <a class="header-anchor" href="#数组运算符" aria-label="Permalink to &quot;数组运算符&quot;">​</a></h4><ul><li><code>$all</code>: 匹配包含查询中指定的所有元素的数组</li><li><code>$elemMatch</code>: 用于强制将查询子句与单个数组元素进行匹配</li><li><code>$size</code>: 匹配指定数组长度大小的结果</li></ul><h4 id="投影运算符" tabindex="-1">投影运算符 <a class="header-anchor" href="#投影运算符" aria-label="Permalink to &quot;投影运算符&quot;">​</a></h4><p>投影运算符针对的是查询语句的第二个参数，即返回的结果。</p><ul><li><code>$</code>: 仅返回数组中与查询条件匹配的第一个元素</li><li><code>$elemMatch</code>: 对返回结果中的数组元素做 <code>$elemMatch</code> 匹配，仅返回数组中满足要求的元素</li><li><code>$meta</code>: 与 <code>$text</code> 运算符配合使用，返回与文档关联的元数据，可以返回匹配分数，或者索引键</li><li><code>$slice</code>: 对返回结果中的数组做截取返回</li></ul><h3 id="特殊的-null-值" tabindex="-1">特殊的 null 值 <a class="header-anchor" href="#特殊的-null-值" aria-label="Permalink to &quot;特殊的 null 值&quot;">​</a></h3><p>在 MongoDB 中，<code>null</code> 是一个比较特殊的值，它可以与自身匹配。也就是说了，通过 <code>{ field: null }</code> 可以查询出 <code>field</code> 键为 <code>null</code> 的文档。</p><p>不过，更特殊的是，<code>null</code> 同样会匹配缺少这个键值的文档。也就是说，<code>{ field: null }</code> 可以查询出不包含 <code>field</code> 键的文档。</p><p>如果仅想匹配键值为 <code>null</code> 的文档，则需要检查该键的值是否为 <code>null</code>，并且通过 <code>$exists</code> 条件确认该键已存在，如 <code>{ field: { $eq: null, $exists: true } }</code> 就是这样的查询条件组。</p>`,116),c=[t];function d(i,r,s,p,u,b){return a(),o("div",null,c)}const g=e(n,[["render",d]]);export{m as __pageData,g as default};
