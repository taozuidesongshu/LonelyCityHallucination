import{_ as a,o as e,c as t,N as o}from"./chunks/framework.60272d8a.js";const f=JSON.parse('{"title":"花了一天的时间，地板式扫盲了vue3所有API盲点 -","description":"","frontmatter":{},"headers":[],"relativePath":"guide/vue3/vue3所有API盲点.md","lastUpdated":1706686109000}'),c={name:"guide/vue3/vue3所有API盲点.md"},p=o('<h1 id="花了一天的时间-地板式扫盲了vue3所有api盲点" tabindex="-1">花了一天的时间，地板式扫盲了vue3所有API盲点 - <a class="header-anchor" href="#花了一天的时间-地板式扫盲了vue3所有api盲点" aria-label="Permalink to &quot;花了一天的时间，地板式扫盲了vue3所有API盲点 -&quot;">​</a></h1><p><a href="https://blog.csdn.net/qq_60633836/article/details/123536786" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_60633836/article/details/123536786</a></p><h2 id="📍前言" tabindex="-1">📍前言 <a class="header-anchor" href="#📍前言" aria-label="Permalink to &quot;📍前言&quot;">​</a></h2><p>最近在一次理解<code>vue</code>项目的代码时，发现周一对好多<code>API</code>都不太熟悉。这间接导致的问题是，代码理解速度要比平常要慢很多。于是乎，赶忙把<code>vue API</code>的学习提上了日程。</p><p>在下面的文章中，将地板式地扫盲<code>vue3</code>文档中<code>API</code>模块的所有内容，融入周一的理解进行深入介绍。下面就来一起看看吧~🍬</p><h2 id="一、🖇框架搭建" tabindex="-1">一、🖇框架搭建 <a class="header-anchor" href="#一、🖇框架搭建" aria-label="Permalink to &quot;一、🖇框架搭建&quot;">​</a></h2><h2 id="_1、关于文档" tabindex="-1">1、关于文档 <a class="header-anchor" href="#_1、关于文档" aria-label="Permalink to &quot;1、关于文档&quot;">​</a></h2><p>首先附上官方文档的具体材料：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fcn.vuejs.org%2Fapi%2F" title="https://cn.vuejs.org/api/" target="_blank" rel="noreferrer">cn.vuejs.org/api/</a></p><h2 id="_2、vue3-api整体盘点" tabindex="-1">2、VUE3 API整体盘点 <a class="header-anchor" href="#_2、vue3-api整体盘点" aria-label="Permalink to &quot;2、VUE3 API整体盘点&quot;">​</a></h2><p>在<code>vue3</code>的全新<code>API</code>中，有部分在<code>vue2</code>的基础上沿用了。还有另外一部分，是<code>vue3</code>所新增加的。我们先来看<code>vue3 API</code>文档主要包含哪些内容？</p><p><code>vue3 API</code>主要包含以下六个部分：</p><ul><li>全局API —— 全局会用到的API</li><li>组合式API —— vue3所拥有的组合式API</li><li>选项式API —— vue2所拥有的选项式API</li><li>内置内容 —— 指令、组件、特殊元素和特殊属性</li><li>单文件组件 —— 语法定义、</li><li>进阶API —— 渲染函数、服务端渲染、TS工具类型和自定义渲染</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a558d668bdb4098b5906856113fa41a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="vue3 API盘点"></p><p>下面将依据上面提到的六大点内容，来进行相应的剖析和讲解。</p><h2 id="二、🎨全局api" tabindex="-1">二、🎨全局API <a class="header-anchor" href="#二、🎨全局api" aria-label="Permalink to &quot;二、🎨全局API&quot;">​</a></h2><p>vue3的全局API包含两个部分：应用实例和通用API。那它们各自都有哪些内容呢？</p><h2 id="_1、应用实例" tabindex="-1">1、应用实例 <a class="header-anchor" href="#_1、应用实例" aria-label="Permalink to &quot;1、应用实例&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48d3faec9e3e4347bab736c6a56ad4c1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="02_应用实例"></p><h2 id="_2、通用api" tabindex="-1">2、通用API <a class="header-anchor" href="#_2、通用api" aria-label="Permalink to &quot;2、通用API&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/22e0ba81bdb0419ab7db3683e96c677e~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="02_通用"></p><h2 id="三、🚲组合式api" tabindex="-1">三、🚲组合式API <a class="header-anchor" href="#三、🚲组合式api" aria-label="Permalink to &quot;三、🚲组合式API&quot;">​</a></h2><p>谈到<code>vue3</code> ，相信大家最为熟悉的就是 <code>composition API</code> 了，也就是 <code>组合式 API</code> 。那么，<code>vue3</code> 的 <code>组合式 API</code> 都给我们带来了什么呢？</p><h2 id="_1、setup" tabindex="-1">1、setup <a class="header-anchor" href="#_1、setup" aria-label="Permalink to &quot;1、setup&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c40e772cbf184b75bf6e6a869f317c03~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="01_setup"></p><h2 id="_2、响应式-核心" tabindex="-1">2、响应式：核心 <a class="header-anchor" href="#_2、响应式-核心" aria-label="Permalink to &quot;2、响应式：核心&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14078b9e9ca14b5caf2ed92692bc40a2~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="02_响应式核心"></p><h2 id="_3、响应式-工具函数" tabindex="-1">3、响应式：工具函数 <a class="header-anchor" href="#_3、响应式-工具函数" aria-label="Permalink to &quot;3、响应式：工具函数&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1b1da9b608e449ca8f21038fd761e59~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="03_响应式工具函数"></p><h2 id="_4、响应式-进阶" tabindex="-1">4、响应式：进阶 <a class="header-anchor" href="#_4、响应式-进阶" aria-label="Permalink to &quot;4、响应式：进阶&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5f1183e88624bc69a930897b47ee2ae~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="04_响应式进阶"></p><h2 id="_5、生命周期钩子" tabindex="-1">5、生命周期钩子 <a class="header-anchor" href="#_5、生命周期钩子" aria-label="Permalink to &quot;5、生命周期钩子&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d78d13c852c4a6eab6a44a6601015c9~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="05_生命周期钩子"></p><h2 id="_6、依赖注入" tabindex="-1">6、依赖注入 <a class="header-anchor" href="#_6、依赖注入" aria-label="Permalink to &quot;6、依赖注入&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b40f6eedb6f4046af0645c5564c09e0~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="06_依赖注入"></p><h2 id="四、🌠选项式api" tabindex="-1">四、🌠选项式API <a class="header-anchor" href="#四、🌠选项式api" aria-label="Permalink to &quot;四、🌠选项式API&quot;">​</a></h2><p><code>选项式API</code> 即 <code>options API</code> 。可能有的小伙伴会觉得它在 <code>vue2</code> 项目下会更为常见一些。但在 <code>vue3</code> 项目中，也是有一些 <code>选项式API</code> 值得我们去挖掘的。那都有哪些内容呢，我们来一探究竟。</p><h2 id="_1、状态选项" tabindex="-1">1、状态选项 <a class="header-anchor" href="#_1、状态选项" aria-label="Permalink to &quot;1、状态选项&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f7209eb996134846a80afdccdc1cf88a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="01_状态选项"></p><h2 id="_2、渲染选项" tabindex="-1">2、渲染选项 <a class="header-anchor" href="#_2、渲染选项" aria-label="Permalink to &quot;2、渲染选项&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1af1316b37249dbba7add34476ba36b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="02_渲染选项"></p><h2 id="_3、生命周期选项" tabindex="-1">3、生命周期选项 <a class="header-anchor" href="#_3、生命周期选项" aria-label="Permalink to &quot;3、生命周期选项&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a4cdbd423f5441a88535af4c9c48d45a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="03_生命周期选项"></p><h2 id="_4、组合选项" tabindex="-1">4、组合选项 <a class="header-anchor" href="#_4、组合选项" aria-label="Permalink to &quot;4、组合选项&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b0ff576506d49dbb9a37ef0e99aba2e~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="04_组合选项"></p><h2 id="_5、其他杂项" tabindex="-1">5、其他杂项 <a class="header-anchor" href="#_5、其他杂项" aria-label="Permalink to &quot;5、其他杂项&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5b2246ebc65344cb93f1f1d4ef024a10~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="05_其他杂项"></p><h2 id="_6、组件实例" tabindex="-1">6、组件实例 <a class="header-anchor" href="#_6、组件实例" aria-label="Permalink to &quot;6、组件实例&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/037d0d3a71ea4129a64dd6c8aea93abd~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="06_组件实例"></p><h2 id="五、🏕内置内容" tabindex="-1">五、🏕内置内容 <a class="header-anchor" href="#五、🏕内置内容" aria-label="Permalink to &quot;五、🏕内置内容&quot;">​</a></h2><p><code>vue3</code> 的内置内容包括<strong>指令</strong>、<strong>组件</strong>、<strong>特殊元素element</strong>和<strong>特殊属性attributes</strong>。如果要谈在什么场景下会用到内置内容，那周一可能觉得，在一般的 <code>vue</code> 项目开发中，基本都会用到<strong>内置内容</strong>。较为常见的是用v-if和v-else-if来判断什么时候显示某个组件，什么时候不显示某个组件。</p><p>还有像 <code>v-model</code> 、<code>v-on</code> 和 <code>v-for</code> 等指令，都是在 <code>vue</code> 项目中非常高频率使用的指令。那 <code>vue3</code> 的内置内容都还有哪些东西呢？请看下方介绍。</p><h2 id="_1、指令" tabindex="-1">1、指令 <a class="header-anchor" href="#_1、指令" aria-label="Permalink to &quot;1、指令&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/434b8e6051904290a8d878becfa183cf~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="01_指令"></p><h2 id="_2、组件" tabindex="-1">2、组件 <a class="header-anchor" href="#_2、组件" aria-label="Permalink to &quot;2、组件&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3d10419800648108118383899dd6a58~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="02_组件"></p><h2 id="_3、特殊元素" tabindex="-1">3、特殊元素 <a class="header-anchor" href="#_3、特殊元素" aria-label="Permalink to &quot;3、特殊元素&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e30e4b2adbbd43508cb50d2c5b194394~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="03_特殊元素"></p><h2 id="_4、特殊属性attributes" tabindex="-1">4、特殊属性Attributes <a class="header-anchor" href="#_4、特殊属性attributes" aria-label="Permalink to &quot;4、特殊属性Attributes&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3064e1d58d8421cb4d15026bdcea024~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="04_特殊属性Attributes"></p><h2 id="六、📸单文件组件" tabindex="-1">六、📸单文件组件 <a class="header-anchor" href="#六、📸单文件组件" aria-label="Permalink to &quot;六、📸单文件组件&quot;">​</a></h2><p>对于 <code>vue</code> 来说，相信大家都会非常熟悉它的组件化思想，似乎有一种理念是：万物皆可组件。那对于一个组件来说，我们都需要了解它的什么内容呢？比如，我们写的 <code>&lt;template&gt;</code> 是什么，用 <code>&lt;script setup&gt;</code> 和 <code>&lt;script lang=&quot;ts&quot;&gt;</code> 都分别是什么含义，<code>&lt;style&gt;</code> 用了 <code>scoped</code> 是什么意思，<code>:slotted</code> 插槽选择器又在什么情况下使用呢？我们一起来一探究竟。</p><h2 id="_1、sfc语法定义" tabindex="-1">1、SFC语法定义 <a class="header-anchor" href="#_1、sfc语法定义" aria-label="Permalink to &quot;1、SFC语法定义&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ba637efb1d0432b9bfaf9156f2a5d67~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="01_SFC语法定义"></p><h2 id="_2、单文件组件script-setup" tabindex="-1">2、单文件组件script setup <a class="header-anchor" href="#_2、单文件组件script-setup" aria-label="Permalink to &quot;2、单文件组件script setup&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/24cd675bd15f462bbf1bdea7a2fa38df~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="02_单文件组setup"></p><h2 id="_3、css功能" tabindex="-1">3、css功能 <a class="header-anchor" href="#_3、css功能" aria-label="Permalink to &quot;3、css功能&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb956ae4b93a433ca01be19cbc47480b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="03_CSS功能"></p><h2 id="七、📈进阶api" tabindex="-1">七、📈进阶API <a class="header-anchor" href="#七、📈进阶api" aria-label="Permalink to &quot;七、📈进阶API&quot;">​</a></h2><p>上面我们了解了 <code>vue3</code> 的基础API，准确来说，上面的 <code>API</code> 可以解决实际工作中 <code>80%</code> 的问题。那下面，我们就再来看一些较为进阶的 <code>api</code> 操作。下面所涉及到的这些 <code>API</code> ，更多的是可以在<strong>某些定制化的场景</strong>下，做一些高阶的操作。比如：我们可以在一个 <code>headless</code> 组件里，用 <code>render</code> 和 <code>h()</code> 函数，来渲染自定义的页面。那 <code>进阶 API</code> 都还有哪些东西呢，来看下面的内容。</p><h2 id="_1、渲染函数" tabindex="-1">1、渲染函数 <a class="header-anchor" href="#_1、渲染函数" aria-label="Permalink to &quot;1、渲染函数&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ede9874e71314de5abaa8694e928b237~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="01_渲染函数"></p><h2 id="_2、服务端渲染" tabindex="-1">2、服务端渲染 <a class="header-anchor" href="#_2、服务端渲染" aria-label="Permalink to &quot;2、服务端渲染&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ca5312a130b41239b47e73c4da823bb~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="02_服务端渲染"></p><h2 id="_3、typescript工具类型" tabindex="-1">3、TypeScript工具类型 <a class="header-anchor" href="#_3、typescript工具类型" aria-label="Permalink to &quot;3、TypeScript工具类型&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/814883d4d24e44c99d1d12cac9932f81~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="03_TypeScript工具类型"></p><h2 id="_4、自定义渲染" tabindex="-1">4、自定义渲染 <a class="header-anchor" href="#_4、自定义渲染" aria-label="Permalink to &quot;4、自定义渲染&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68153183f580470aafbb0697f640ac6c~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="04_自定义渲染"></p>',77),i=[p];function r(d,b,l,s,n,h){return e(),t("div",null,i)}const m=a(c,[["render",r]]);export{f as __pageData,m as default};
