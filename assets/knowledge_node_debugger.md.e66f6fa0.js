import{_ as s,o as a,c as n,N as e}from"./chunks/framework.60272d8a.js";const l="/LonelyCityHallucination/assets/debugger.2bd23263.png",B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/node/debugger.md","lastUpdated":1706686109000}'),p={name:"knowledge/node/debugger.md"},o=e(`<h2 id="nodejs之调试" tabindex="-1">NodeJs之调试 <a class="header-anchor" href="#nodejs之调试" aria-label="Permalink to &quot;NodeJs之调试&quot;">​</a></h2><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>当我们只专注于前端的时候，我们习惯性F12，这会给我们带来安全与舒心的感觉。</p><p>但是当我们使用NodeJs来开发后台的时候，我想噩梦来了。</p><p>但是也别泰国担心，NodeJs的调试是很不方便！这是肯定的。</p><p>但是还好，我们有## node-inspector ##来帮助我们解决一部分的调试问题，但是对于异步能力很强的NodeJs它还是有点力不从心。</p><h2 id="安装node-inspector" tabindex="-1">安装node-inspector <a class="header-anchor" href="#安装node-inspector" aria-label="Permalink to &quot;安装node-inspector&quot;">​</a></h2><p>依旧是通过npm来全局安装node-inspector</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">install</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-g</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">node-inspector</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="测试代码" tabindex="-1">测试代码 <a class="header-anchor" href="#测试代码" aria-label="Permalink to &quot;测试代码&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//event.js</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> events </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">events</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> util </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">util</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">tianxiasan</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">name</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">events</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">EventEmitter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">util</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">inherits</span><span style="color:#BABED8;">(Restaurant</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> events</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">EventEmitter)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//定义角色</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> restaurant </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">tianxiasan</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">测试</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这就是我们要调试的代码</p><h2 id="启动node-inspector" tabindex="-1">启动node-inspector <a class="header-anchor" href="#启动node-inspector" aria-label="Permalink to &quot;启动node-inspector&quot;">​</a></h2><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">C:\\Users\\Administrator&gt;node-inspector</span></span>
<span class="line"><span style="color:#FFCB6B;">Node</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Inspector</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">v0.12.8</span></span>
<span class="line"><span style="color:#FFCB6B;">Visit</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">http://127.0.0.1:8080/?port=</span><span style="color:#F78C6C;">5858</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">to</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">start</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">debugging.</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>好了，启动成功。</p><h2 id="启动nodejs的debug模式" tabindex="-1">启动nodejs的debug模式 <a class="header-anchor" href="#启动nodejs的debug模式" aria-label="Permalink to &quot;启动nodejs的debug模式&quot;">​</a></h2><p>重新开个终端,再来启动nodejs提供的debug调试功能</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">C:\\Users\\Administrator\\Desktop&gt;node</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--debug-brk</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">event.js</span></span>
<span class="line"><span style="color:#FFCB6B;">Debugger</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">listening</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">on</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">port</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">5858</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># --debug-brk的意思是使用调试模式启动event.js 并在第一行断点。</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="添加debugger" tabindex="-1">添加debugger <a class="header-anchor" href="#添加debugger" aria-label="Permalink to &quot;添加debugger&quot;">​</a></h2><p>在我们需要断点的地方添加debugger即可。会自动断点到debugger的地方。</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">server.on(</span><span style="color:#FFCB6B;">&#39;listening&#39;</span><span style="color:#FFCB6B;">,</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">onListening</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">debugger</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="查看效果" tabindex="-1">查看效果 <a class="header-anchor" href="#查看效果" aria-label="Permalink to &quot;查看效果&quot;">​</a></h2><p>这样两个程序之间通过socket来通信。我们就可以在我们属性的谷歌开发者中工具中来调试NodeJs了。 <img src="`+l+'" alt="images"> 多么熟悉的界面，下面的调试流程与Js调试差不多。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>第一：使用node-inspector 启动界面调试工具，并在页面打开连接<a href="http://127.0.0.1:8080/?port=5858" target="_blank" rel="noreferrer">http://127.0.0.1:8080/?port=5858</a></p><p>第二：使用 node --debug-brk app.js 启动我们的应用,并在第一行断点，方便我们调试</p><p>第三: 如果你想修改代码后，依旧可以热启动，并重新调试的话，那使用supervisor来启动即可，类似这样:supervisor --debug-brk app.js</p>',27),r=[o];function t(c,i,d,y,D,u){return a(),n("div",null,r)}const F=s(p,[["render",t]]);export{B as __pageData,F as default};
