import{_ as s,o as n,c as a,N as e}from"./chunks/framework.60272d8a.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/vue/EventBus全局事件总线.md","lastUpdated":1706686109000}'),l={name:"guide/vue/EventBus全局事件总线.md"},p=e(`<h2 id="一、什么是eventbus" tabindex="-1">一、什么是EventBus <a class="header-anchor" href="#一、什么是eventbus" aria-label="Permalink to &quot;一、什么是EventBus&quot;">​</a></h2><ul><li>EventBus是一个开源库，利用<strong>发布/订阅者模式</strong>对项目进行解耦</li><li>利用很少的代码来实现多组件间通信</li><li>在Vue中可以使用它来作为沟通桥梁的概念，就像所有组件共用的相同的事件中心</li><li>如图所示，可以向该中心注册发送事件或者接收事件，这也就说明了<strong>所有组件可以上下平行地通知其他组件</strong> <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3abede3bba4240b0b7730f39f6cd0198~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="image.png"></li></ul><h2 id="二、-在vue2-中如何使用eventbus" tabindex="-1">二、 在vue2 中如何使用eventBus <a class="header-anchor" href="#二、-在vue2-中如何使用eventbus" aria-label="Permalink to &quot;二、 在vue2 中如何使用eventBus&quot;">​</a></h2><h4 id="🌼-创建事件总线" tabindex="-1">🌼 创建事件总线 <a class="header-anchor" href="#🌼-创建事件总线" aria-label="Permalink to &quot;🌼 创建事件总线&quot;">​</a></h4><ul><li>第一种方法是可以直接在<code>main.js</code>初始化,在vue的原型对象上定义<code>$eventBus</code></li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//main.js</span></span>
<span class="line"><span style="color:#FFCB6B;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">$eventBus </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#BABED8;">()</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>第二种可以新建一个.js文件，在其中引入Vue并导出它的一个实例</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//event-bus.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> Vue </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> EventBus </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#BABED8;">()</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>实质上它算一个不具备DOM的组件，我们需要的仅仅是它的实例方法</p><h4 id="🌼-引入event-bus-js" tabindex="-1">🌼 引入event-bus.js <a class="header-anchor" href="#🌼-引入event-bus-js" aria-label="Permalink to &quot;🌼 引入event-bus.js&quot;">​</a></h4><ul><li>仅使用上述第二种方法才需要这一步</li><li>每一个使用到eventBus的组件都需要引入event-bus.js</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> EventBus form </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./eventBus.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="🌼触发事件" tabindex="-1">🌼触发事件 <a class="header-anchor" href="#🌼触发事件" aria-label="Permalink to &quot;🌼触发事件&quot;">​</a></h4><ul><li>发布者角色</li><li>使用方法</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//对于方式一</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">$eventBus</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$emit</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">eventName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">params</span><span style="color:#89DDFF;">....</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//对于方式二</span></span>
<span class="line"><span style="color:#BABED8;">EventBus</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$emit</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">eventName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">params</span><span style="color:#89DDFF;">....</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>使用实例 --在页面A发布事件</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">&lt;template&gt;</span></span>
<span class="line"><span style="color:#babed8;">    &lt;button @click=&quot;sendMsg()&quot;&gt;-&lt;/button&gt;</span></span>
<span class="line"><span style="color:#babed8;">&lt;/template&gt;</span></span>
<span class="line"><span style="color:#babed8;"> </span></span>
<span class="line"><span style="color:#babed8;">&lt;script&gt; </span></span>
<span class="line"><span style="color:#babed8;">import EventBus from &#39;./eventBus.js&#39;</span></span>
<span class="line"><span style="color:#babed8;">export default {</span></span>
<span class="line"><span style="color:#babed8;">  methods: {</span></span>
<span class="line"><span style="color:#babed8;">  //发送事件</span></span>
<span class="line"><span style="color:#babed8;">    sendMsg() {</span></span>
<span class="line"><span style="color:#babed8;">      EventBus.$emit(&quot;aPostMsg&quot;, &#39;页面A发出的消息&#39;);</span></span>
<span class="line"><span style="color:#babed8;">      //或者</span></span>
<span class="line"><span style="color:#babed8;">      this.$eventBus.$emit(&#39;aPostMsg&#39;,&#39;页面A发出的消息&#39;);</span></span>
<span class="line"><span style="color:#babed8;">    }</span></span>
<span class="line"><span style="color:#babed8;">  }</span></span>
<span class="line"><span style="color:#babed8;">}; </span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="🌼-监听事件" tabindex="-1">🌼 监听事件 <a class="header-anchor" href="#🌼-监听事件" aria-label="Permalink to &quot;🌼 监听事件&quot;">​</a></h4><ul><li>订阅者角色</li><li>使用方法</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">//对于方式一</span></span>
<span class="line"><span style="color:#babed8;">this.$eventBus.$on(&#39;evnetName&#39;,(params...) =&gt; {</span></span>
<span class="line"><span style="color:#babed8;">    //do something....</span></span>
<span class="line"><span style="color:#babed8;">})</span></span>
<span class="line"><span style="color:#babed8;">//对于方式二</span></span>
<span class="line"><span style="color:#babed8;">EventBus.$on(&#39;eventName&#39;, (params...) =&gt; {</span></span>
<span class="line"><span style="color:#babed8;">    //do something....</span></span>
<span class="line"><span style="color:#babed8;">})</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>使用实例 --在页面B订阅事件</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">&lt;script&gt; </span></span>
<span class="line"><span style="color:#babed8;">import EventBus from &#39;./eventBus.js&#39;</span></span>
<span class="line"><span style="color:#babed8;">export default {</span></span>
<span class="line"><span style="color:#babed8;">  data(){</span></span>
<span class="line"><span style="color:#babed8;">    return {}</span></span>
<span class="line"><span style="color:#babed8;">  },</span></span>
<span class="line"><span style="color:#babed8;">  mounted() {</span></span>
<span class="line"><span style="color:#babed8;">    EventBus.$on(&quot;aPostMsg&quot;, (msg) =&gt; {</span></span>
<span class="line"><span style="color:#babed8;">      console.log(msg) //页面A发出的消息</span></span>
<span class="line"><span style="color:#babed8;">    });</span></span>
<span class="line"><span style="color:#babed8;">    //或者</span></span>
<span class="line"><span style="color:#babed8;">    this.$eventBus.$on(&quot;aPostMsg&quot;, (msg) =&gt; {</span></span>
<span class="line"><span style="color:#babed8;">      console.log(msg) //页面A发出的消息</span></span>
<span class="line"><span style="color:#babed8;">    });</span></span>
<span class="line"><span style="color:#babed8;">  }</span></span>
<span class="line"><span style="color:#babed8;">};</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><blockquote><p>如果只是这样的，监听事件会一直存在，反复进入到接收组件内操作获取数据我们只期待发送一次，但是会发生多次</p></blockquote><h4 id="🌼-移除事件监听" tabindex="-1">🌼 移除事件监听 <a class="header-anchor" href="#🌼-移除事件监听" aria-label="Permalink to &quot;🌼 移除事件监听&quot;">​</a></h4><ul><li><p>原因：</p><ul><li>避免在监听的时候，如上述所说的，事件被反复监听</li><li>因为是热更新，事件可能会被多次绑定监听</li><li>没有及时移除eventBus也可能会导致内容泄漏</li></ul></li><li><p>那么如何移除事件监听呢</p><ul><li>移除单个事件</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">//对于方式一</span></span>
<span class="line"><span style="color:#babed8;">EventBus.$off(&#39;aPostMsg&#39;)</span></span>
<span class="line"><span style="color:#babed8;">//对于方式二</span></span>
<span class="line"><span style="color:#babed8;">this.$eventBus.$off(&#39;aPostMsg&#39;)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>移除所有事件</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">//对于方式一</span></span>
<span class="line"><span style="color:#babed8;">EventBus.$off(&#39;aPostMsg&#39;)</span></span>
<span class="line"><span style="color:#babed8;">//对于方式二</span></span>
<span class="line"><span style="color:#babed8;">this.$eventBus.$off(&#39;aPostMsg&#39;)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>使用实例</p><ul><li>在beforeDestroyed(){}中监听移除事件</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">beforeDestroyed(){</span></span>
<span class="line"><span style="color:#babed8;">  EventBus.$off(&#39;aPostMsg&#39;)</span></span>
<span class="line"><span style="color:#babed8;">  //或者</span></span>
<span class="line"><span style="color:#babed8;">   this.$eventBus.$off(&#39;aPostMsg&#39;)</span></span>
<span class="line"><span style="color:#babed8;">}</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><h2 id="三、vue3-中的-eventbus" tabindex="-1">三、vue3 中的 eventBus <a class="header-anchor" href="#三、vue3-中的-eventbus" aria-label="Permalink to &quot;三、vue3 中的 eventBus&quot;">​</a></h2><h4 id="🌷-vue3的变化" tabindex="-1">🌷 Vue3的变化 <a class="header-anchor" href="#🌷-vue3的变化" aria-label="Permalink to &quot;🌷 Vue3的变化&quot;">​</a></h4><ul><li>在 Vue3.0+ 的版本中，Vue 移除了<code>$on</code>、<code>$off</code>和<code>$once</code>方法；并且没有提供兼容的功能</li><li>在vue3中推荐我们使用<code>mitt</code>事件总线传递数据，其实mitt的使用方式和vue原本的自定义事件使用方式相同 -<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Frfcs%2Fblob%2Fmaster%2Factive-rfcs%2F0020-events-api-change.md" title="https://github.com/vuejs/rfcs/blob/master/active-rfcs/0020-events-api-change.md" target="_blank" rel="noreferrer">详细可查看文档</a></li></ul><h4 id="🌷-mitt的使用" tabindex="-1">🌷 mitt的使用 <a class="header-anchor" href="#🌷-mitt的使用" aria-label="Permalink to &quot;🌷 mitt的使用&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">- 在根目录终端执行</span></span>
<span class="line"><span style="color:#babed8;">\`\`\`js</span></span>
<span class="line"><span style="color:#babed8;">npm install --save mitt</span></span>
<span class="line"><span style="color:#babed8;">\`\`\`</span></span>
<span class="line"><span style="color:#babed8;">- 将方法导出使用</span></span>
<span class="line"><span style="color:#babed8;">\`\`\`js </span></span>
<span class="line"><span style="color:#babed8;">// eventBus.js</span></span>
<span class="line"><span style="color:#babed8;">import emitter from &#39;tiny-emitter/instance&#39;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">export default {</span></span>
<span class="line"><span style="color:#babed8;">  $on: (...args) =&gt; emitter.on(...args),</span></span>
<span class="line"><span style="color:#babed8;">  $once: (...args) =&gt; emitter.once(...args),</span></span>
<span class="line"><span style="color:#babed8;">  $off: (...args) =&gt; emitter.off(...args),</span></span>
<span class="line"><span style="color:#babed8;">  $emit: (...args) =&gt; emitter.emit(...args),</span></span>
<span class="line"><span style="color:#babed8;">}</span></span>
<span class="line"><span style="color:#babed8;">\`\`\`</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="四、-手写-eventbus" tabindex="-1">四、 手写 eventBus <a class="header-anchor" href="#四、-手写-eventbus" aria-label="Permalink to &quot;四、 手写 eventBus&quot;">​</a></h2><h4 id="🌻-实现思路" tabindex="-1">🌻 实现思路： <a class="header-anchor" href="#🌻-实现思路" aria-label="Permalink to &quot;🌻 实现思路：&quot;">​</a></h4><ul><li>声明了一个<code>EventBus</code>类，用来处理发布订阅，用<code>events</code>对象存储监听的时间， 用数组存储监听事件的回调函数</li><li><strong>订阅</strong> 了事件thing1，thing2.... 先判断该事件是否存储过，如果没有存储过就赋值为空数组，存储过就往数组里面<code>push</code>回调函数</li><li><strong>触发</strong>了事件，则从<code>events</code>取出该事件的回调函数数组，利用for..of..对其进行遍历调用</li><li><strong>移除</strong>事件 ,如果events有该事件的话则对其进行delete</li></ul><h4 id="🌻-实现代码" tabindex="-1">🌻 实现代码 <a class="header-anchor" href="#🌻-实现代码" aria-label="Permalink to &quot;🌻 实现代码&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">  class EventBus {</span></span>
<span class="line"><span style="color:#babed8;">    constructor() {</span></span>
<span class="line"><span style="color:#babed8;">      this.events = {}; // 用于存储所有订阅事件</span></span>
<span class="line"><span style="color:#babed8;">    }</span></span>
<span class="line"><span style="color:#babed8;">    // 订阅事件</span></span>
<span class="line"><span style="color:#babed8;">    $on(name, callbcak) {</span></span>
<span class="line"><span style="color:#babed8;">      // 判断是否存储过</span></span>
<span class="line"><span style="color:#babed8;">      if(!this.events[name]) {</span></span>
<span class="line"><span style="color:#babed8;">        this.events[name] = [];</span></span>
<span class="line"><span style="color:#babed8;">      }</span></span>
<span class="line"><span style="color:#babed8;">      this.events[name].push(callbcak); // 往事件数组里面push</span></span>
<span class="line"><span style="color:#babed8;">    }</span></span>
<span class="line"><span style="color:#babed8;">    // 发布事件</span></span>
<span class="line"><span style="color:#babed8;">    $emit(name， ...args) {</span></span>
<span class="line"><span style="color:#babed8;">      // 获取存储的事件回调函数数组</span></span>
<span class="line"><span style="color:#babed8;">      const eventList = this.events[name];</span></span>
<span class="line"><span style="color:#babed8;">      // 执行所有回调函数</span></span>
<span class="line"><span style="color:#babed8;">      for (const callbcak of eventList) {</span></span>
<span class="line"><span style="color:#babed8;">        callbcak(...args);</span></span>
<span class="line"><span style="color:#babed8;">      }</span></span>
<span class="line"><span style="color:#babed8;">    }</span></span>
<span class="line"><span style="color:#babed8;">    // 移除事件</span></span>
<span class="line"><span style="color:#babed8;">    $off(name) {</span></span>
<span class="line"><span style="color:#babed8;">    if(this.evetns[name]) {</span></span>
<span class="line"><span style="color:#babed8;">        delete this.events[name]</span></span>
<span class="line"><span style="color:#babed8;">    }</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div>`,35),r=[p];function t(c,o,i,b,u,d){return n(),a("div",null,r)}const v=s(l,[["render",t]]);export{y as __pageData,v as default};
