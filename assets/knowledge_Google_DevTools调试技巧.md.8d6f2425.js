import{_ as e,o,c as t,N as a}from"./chunks/framework.60272d8a.js";const b=JSON.parse('{"title":"Chrome DevTools 中一些非常实用的功能和调试技巧<div>","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/Google/DevTools调试技巧.md","lastUpdated":1706686109000}'),p={name:"knowledge/Google/DevTools调试技巧.md"},s=a('<h1 id="chrome-devtools-中一些非常实用的功能和调试技巧-div" tabindex="-1">Chrome DevTools 中一些非常实用的功能和调试技巧<code>&lt;div&gt;</code> <a class="header-anchor" href="#chrome-devtools-中一些非常实用的功能和调试技巧-div" aria-label="Permalink to &quot;Chrome DevTools 中一些非常实用的功能和调试技巧`&lt;div&gt;`&quot;">​</a></h1><p>今天来分享 Chrome DevTools 中一些非常实用的功能和调试技巧！</p><h2 id="_1-保留日志" tabindex="-1">1. 保留日志 <a class="header-anchor" href="#_1-保留日志" aria-label="Permalink to &quot;1\\. 保留日志&quot;">​</a></h2><p>当我们刷新完页面之后，通常控制台的 Console 面板就会被清空。如果想保留控制台的日志，就可以在设置中勾选 Preserve log 选项以保留控制台中的日志。</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668043676-c4ca4238a0b9238.png" alt="保留日志"></p><h2 id="_2-代码覆盖率" tabindex="-1">2. 代码覆盖率 <a class="header-anchor" href="#_2-代码覆盖率" aria-label="Permalink to &quot;2\\. 代码覆盖率&quot;">​</a></h2><p>我们可以打开设置，在<code>Experiments</code>中勾选<code>Record coverage while performance tracing</code>选项。</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668043762-c81e728d9d4c2f6.png" alt="代码覆盖率"></p><p>在面板下方的<code>Coverage</code>面板中点击红色按钮以记录页面的代码覆盖率：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668043848-eccbc87e4b5ce2f.png" alt="记录页面的代码覆盖率"></p><blockquote><p>代码覆盖率使用动态分析法来收集代码运行时的覆盖率，让开发者知道有代码在页面上真正的使用。动态分析是指在应用运行状态下收集代码执行数据的过程，换句话说，覆盖率数据就是在代码执行过程中通过标记收集到的。</p></blockquote><h2 id="_3-显示重绘" tabindex="-1">3. 显示重绘 <a class="header-anchor" href="#_3-显示重绘" aria-label="Permalink to &quot;3\\. 显示重绘&quot;">​</a></h2><p>在浏览器的开发者工具中可以通过开启显示重绘选项以查看页面在执行操作时哪些元素会发生重绘。在控制台右上角三个点中的<code>More tools</code>选项中开启<code>Rendering</code>选项卡：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668043993-a87ff679a2f3e71.png" alt="显示重绘"></p><p>开启 Rendering（渲染）选项后，开启<code>Paint flashing</code>：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668044046-e4da3b7fbbce234.png" alt="开启Paint flashing"></p><p>当刷新页面时，显示绿色的区域就是重新绘制区域。</p><h2 id="_4-检查动画" tabindex="-1">4. 检查动画 <a class="header-anchor" href="#_4-检查动画" aria-label="Permalink to &quot;4\\. 检查动画&quot;">​</a></h2><p>Chrome 的开发者工具不仅可以调试样式，还可以调试动画，可以在控制台右上角三个点中的<code>More tools</code>选项中开启<code>Animations</code>选项卡：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668044108-1679091c5a880fa.png" alt="检查动画"></p><p>当页面的动画执行时，就会在时间轨道上查看所有的动画，点击其中一个动画可以懂得执行过程以及时间轴：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668044162-8f14e45fceea167.png" alt="检查动画"></p><p>我们可以在时间轴上定位到任一时刻的动画帧，也可以拖动左右两端的圆点来修改动画的延迟和周期，修改之后可以在属性面板看到对应的 CSS 样式。</p><h2 id="_5-截图" tabindex="-1">5. 截图 <a class="header-anchor" href="#_5-截图" aria-label="Permalink to &quot;5\\. 截图&quot;">​</a></h2><p>Chrome 浏览器内置了截图功能，可以在浏览器开发者工具中使用<code>Ctrl+Shift+P</code>（Windows）或者<code>Command+Shift+P</code>（Mac）快捷键打开搜索来查找<code>screenshot</code>：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668044231-c9f0f895fb98ab9.png" alt="Chrome 浏览器内置了截图功能"></p><p>这里有四个选项：</p><ul><li>第一个：截取自选区域；</li><li>第二个：截取整个网页；</li><li>第三个：截取当前节点；</li><li>第四个：截取当前屏幕。</li></ul><p>截图完成后自动下载到下载目录，打开浏览器的下载框或本机的下载目录即可看到图片。</p><h2 id="_6-local-overrides" tabindex="-1">6. Local Overrides <a class="header-anchor" href="#_6-local-overrides" aria-label="Permalink to &quot;6\\. Local Overrides&quot;">​</a></h2><p>我们可以使用本地资源覆盖网页所使用的资源，比如可以使用本地 CSS 文件覆盖网页的css文件，修改样式。将本地的文件夹映射到网络，在 Chrome 开发者功能里面对 CSS 样式的修改都会直接改动本地文件，页面重新加载，使用的资源也是本地资源，达到持久化的效果。</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668044319-45c48cce2e2d7fb.png" alt="Local Overrides"></p><p>详见：点击<a href="https://www.mybj123.com/gohref.php?url=https://developer.chrome.com/blog/new-in-devtools-65/#overrides" target="_blank" rel="noreferrer">这里</a></p><h2 id="_7-全局搜索代码" tabindex="-1">7. 全局搜索代码 <a class="header-anchor" href="#_7-全局搜索代码" aria-label="Permalink to &quot;7\\. 全局搜索代码&quot;">​</a></h2><p>Chrome浏览器为我们提供了全局搜索的概念，可以点击开发者工具右上角的三个点，点击Search选项，在Search面板中搜索所需关键字即可，点击搜索结果即可跳到对应文件的代码行：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668044569-b00bdaf8d970b7d.png" alt="全局搜索代码"></p><h2 id="_8-事件监听器的断点" tabindex="-1">8. 事件监听器的断点 <a class="header-anchor" href="#_8-事件监听器的断点" aria-label="Permalink to &quot;8\\. 事件监听器的断点&quot;">​</a></h2><p>有时应用会在用户发生交互时出现问题，这时我们就可以添加事件监听器添加断点来捕获这些事件以检查交互时的问题。可以在<code>Source</code>面板右侧的<code>Event Listener Breakpoints</code>中勾选相应的事件：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668044624-d3d9446802a4425.png" alt="事件监听器的断点"></p><h2 id="_9-dom-操作的断点" tabindex="-1">9. DOM 操作的断点 <a class="header-anchor" href="#_9-dom-操作的断点" aria-label="Permalink to &quot;9\\. DOM 操作的断点&quot;">​</a></h2><p>当页面的内容发生变化时，如果想要知道是哪些脚本影响了它，就可以给DOM设置断点。我们可以右键点击需要设置断点的DOM元素，在弹出的菜单中点击<code>Break on</code>以选择合适的断点。</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668044678-c20ad4d76fe9775.png" alt="DOM 操作的断点"></p><p>可以看到，Break on中有三个选项：</p><ul><li><code>Subtree Modifications</code>：子节点（内容、属性）修改通知，常用在子节点内容发生变化后，来定位源码；</li><li><code>Attributes Modifications</code>：当前节点的属性修改通知，常用在节点的 className 等属性被修改后，来定位源码了；</li><li><code>Node Removal</code>：当前节点移动时通知，常用在节点被移除时，定位源码。</li></ul><h2 id="_10-异步请求的断点" tabindex="-1">10. 异步请求的断点 <a class="header-anchor" href="#_10-异步请求的断点" aria-label="Permalink to &quot;10\\. 异步请求的断点&quot;">​</a></h2><p>XHR breakpoints 可以用于异步请求的断点，点击加号即可添加断点规则，输入请求 的 URL 地址（片段），会在请求地址包含对应字符串的异步请求发出的位置自动停止：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668044747-c51ce410c124a10.png" alt="异步请求的断点"></p><h2 id="_11-css-overview" tabindex="-1">11. CSS Overview <a class="header-anchor" href="#_11-css-overview" aria-label="Permalink to &quot;11\\. CSS Overview&quot;">​</a></h2><p>在 Chrome 的管理面板中，开启 CSS Overview 面板之后，就可以查看当前网站的样式信息了，包括颜色信息、字体信息、媒体查询等。当我们需要优化页面的 CSS 时，这个功能就派上用场了。除此之外，还可以使用该功能方便地查看其他优秀网站的样式信息。</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668044797-aab3238922bcc25.png" alt="CSS Overview"></p><p>默认情况下，该面板是不开启的，可以通过以下步骤来开启此功能：</p><ol><li>在任意页面打开 Chrome 浏览器的 DevTools；</li><li>单击<strong>更多选项</strong>-&gt;<strong>More tools</strong>-&gt;<strong>CSS Overview</strong>。</li></ol><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668044849-9bf31c7ff062936.png" alt="CSS Overview"></p><p>那该如何使用 CSS Overview 面板呢？很简单，只需要点击<strong>Capture overview</strong>按钮来生成页面的 CSS overview报告即可。如果想重新运行CSS Overview，只需点击左上角的<strong>清除</strong>图标，然后再点击<strong>Capture overview</strong>按钮即可。</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668044893-c74d97b01eae257.png" alt="Capture overview按钮"></p><p>CSS Overview 报告主要由五部分组成：</p><p>（1）**Overview summary：**页面 CSS 的高级摘要</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668045004-70efdf2ec9b0860.png" alt="页面 CSS 的高级摘要"></p><p>（2）**Colors：**页面中的所有颜色。颜色按背景颜色、文本颜色等用途分组。它还显示了具有低对比度问题的文本。</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668045080-6f4922f45568161.png" alt="页面中的所有颜色"></p><p>每种颜色都是可点击的。我们可以单击它以获取使用该颜色的元素列表。将鼠标悬停在列表中的元素上就可以突出显示页面中对应的元素。<strong>单击列表中的元素就可以在“Elements</strong>”面板中打开该元素。</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668045388-1f0e3dad9990834.png" alt="颜色的元素列表"></p><p>（3）<strong>Font info：字体信息，<strong>页面中的所有字体及其出现，按不同的字体大小、字体粗细和行高分组。与</strong>颜色</strong>部分类似，可以单击以查看受影响元素的列表。</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668045450-0cc175b9c0f1b6a.png" alt="字体信息"></p><p>（4）**Unused declarations：**未使用的声明，包含所有无效的样式，按原因分组。</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668045487-92eb5ffee6ae2fe.png" alt="Unused declarations：未使用的声明"></p><p>（5）**Media queries：**媒体查询，页面中定义的所有媒体查询，按出现次数最高的排序。单击可以查看受影响元素的列表。</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668045521-4a8a08f09d37b73.png" alt="Media queries：媒体查询"></p><h2 id="_12-csp-违规断点" tabindex="-1">12. CSP 违规断点 <a class="header-anchor" href="#_12-csp-违规断点" aria-label="Permalink to &quot;12\\. CSP 违规断点&quot;">​</a></h2><p><strong>Chrome DevTools CSP 违规断点可以捕捉到与CSP违规有关的可能的异常，并在代码中指出这些异常。</strong></p><blockquote><p>CSP 即内容安全策略，它允许限制网站中的某些行为以提高安全性。例如，CSP 可用于禁止内联脚本或禁止eval，这两者都可以减少跨站脚本 (XSS)攻击的攻击面。</p><p>一个特别新的 CSP 是可信类型 (TT)策略，它支持动态分析，可以系统地防止对网站的一大类注入攻击。为了实现这一点，TT 支持网站监管其 JavaScript 代码，只允许将某些类型的东西分配给 DOM 接收器，例如 innerHTML。</p><p>网站可以通过包含特定的 HTTP 标头来激活内容安全策略。例如，标头content-security-policy: require-trusted-types-for ‘script’; trusted-types default激活页面的 TT 策略。</p><p>目前，调试 TT 违规的唯一方法是在 JS 异常上设置断点。由于强制 TT 违规将触发异常，因此此功能可能会很有用。但是，在现实的场景中，需要对 TT 违规进行更细粒度的控制。特别是，我们希望仅在 TT 违规（而不是其他异常）上中断，也在仅报告模式下中断，并区分不同类型的 TT 违规。</p></blockquote><p>启用该功能将为应用程序增加一个额外的安全层，减少跨站脚本（XSS）等漏洞。</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668045607-8277e0910d75019.png" alt="CSP 违规断点"></p><p>那该如何启用该功能呢？可以通过以下步骤来开启此功能：</p><ol><li>在任意页面打开 Chrome 浏览器的 DevTools；</li><li>点击右上角<strong>设置</strong>图标 -&gt; 选中左侧<strong>Experiments</strong>-&gt; 勾选<strong>Show CSP Violations view；</strong><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668045664-e1671797c52e15f.png" alt="Show CSP Violations view"></li><li>重启浏览器的 DevTools；</li><li>在<strong>CSP Violations Breakpoints</strong>下选择<strong>Trusted Type Violations</strong>即可。<img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668045762-8fa14cdd754f91c.png" alt="选择 Trusted Type Violations "></li></ol><p>当遇到有安全问题的代码时，Chrome DevTools 甚至会显示如何修复改问题。</p><h2 id="_13-新的字体编辑器工具" tabindex="-1">13. 新的字体编辑器工具 <a class="header-anchor" href="#_13-新的字体编辑器工具" aria-label="Permalink to &quot;13\\. 新的字体编辑器工具&quot;">​</a></h2><p>Chrome DevTools 提供了一个实验性的字体编辑器工具，可以用来改变字体设置。可以用它来改变<strong>字体、大小、粗细、行高、字符间距</strong>，并实时看到变化。</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668045827-b2f5ff47436671b.png" alt="新的字体编辑器工具"></p><p>那该如何启用该功能呢？可以通过以下步骤来开启此功能：</p><ol><li>在任意页面打开 Chrome 浏览器的 DevTools；</li><li>点击右上角<strong>设置</strong>图标 -&gt; 选中左侧<strong>Experiments</strong>-&gt; 勾选<strong>Enable New Font Editor Tools within Styles Pane；</strong><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668045884-2510c39011c5be7.png" alt="勾选Enable New Font Editor Tools within Styles Pane"></li><li>重启浏览器的 DevTools；</li><li>选择HTML元素，其中包括想改变的字体，点击字体图标即可。<img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668045998-865c0c0b4ab0e06.png" alt="点击字体图标"></li></ol><h2 id="_14-双屏模式" tabindex="-1">14. 双屏模式 <a class="header-anchor" href="#_14-双屏模式" aria-label="Permalink to &quot;14\\. 双屏模式&quot;">​</a></h2><p>通过启用双屏模式，可以在 Chrome DevTools 模拟器的双屏设备上调试你的 web 应用。这对于开发要适配折叠屏手机的应用是非常有用的。</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668046053-363b122c528f54d.png" alt="双屏模式"></p><p>那该如何启用该功能呢？可以通过以下步骤来开启此功能：</p><ol><li>在任意页面打开 Chrome 浏览器的 DevTools；</li><li>点击右上角<strong>设置</strong>图标 -&gt; 选中左侧<strong>Experiments</strong>-&gt; 勾选<strong>Emulation: Support dual-screen mode；<img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668046113-8ce4b16b22b5889.png" alt="勾选 Emulation: Support dual-screen mode"></strong></li><li>重启浏览器的 DevTools；</li><li>①切换到移动设备调试 -&gt; ②选择一个双屏设备 -&gt; ③点击上方的切换双屏模式。<img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668046173-2db95e8e1a9267b.png" alt="切换双屏模式"></li></ol><h2 id="_15-完整的可访问性树视图" tabindex="-1">15. 完整的可访问性树视图 <a class="header-anchor" href="#_15-完整的可访问性树视图" aria-label="Permalink to &quot;15\\. 完整的可访问性树视图&quot;">​</a></h2><p>通过 Chrome DevTools Accessibility Tree，可以检查为每个DOM元素创建的可访问性对象。这项功能与 Elements 选项卡相似，但使用它可以深入探索应用的更多可访问性细节。</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668046233-6f8f57715090da2.png" alt="完整的可访问性树视图"></p><p>那该如何启用该功能呢？可以通过以下步骤来开启此功能：</p><ol><li>在任意页面打开 Chrome 浏览器的 DevTools；</li><li>点击右上角<strong>设置</strong>图标 -&gt; 选中左侧<strong>Experiments</strong>-&gt; 勾选 Enable the Full accessibility tree view in the Elements pane；<img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668046286-7b8b965ad4bca0e.png" alt="勾选 Enable the Full accessibility tree view in the Elements pane"></li><li>重启浏览器的 DevTools；</li><li>在Elements面板中点击右上角的无障碍按钮，将元素视图模式切换为无障碍树视图。<img src="https://media.mybj123.com/wp-content/uploads/2022/11/1668046345-d95679752134a2d.png" alt="将元素视图模式切换为无障碍树视图"></li></ol>',91),r=[s];function i(l,n,c,d,m,h){return o(),t("div",null,r)}const u=e(p,[["render",i]]);export{b as __pageData,u as default};
