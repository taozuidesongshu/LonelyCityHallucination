import{_ as e,o,c,N as a}from"./chunks/framework.60272d8a.js";const _=JSON.parse('{"title":"vue项目打包后使用reverse-sourcemap反编译到源码","description":"","frontmatter":{},"headers":[],"relativePath":"guide/vueBugFlex/vue包后反编译到源码.md","lastUpdated":1706686109000}'),r={name:"guide/vueBugFlex/vue包后反编译到源码.md"},p=a('<h1 id="vue项目打包后使用reverse-sourcemap反编译到源码" tabindex="-1">vue项目打包后使用reverse-sourcemap反编译到源码 <a class="header-anchor" href="#vue项目打包后使用reverse-sourcemap反编译到源码" aria-label="Permalink to &quot;vue项目打包后使用reverse-sourcemap反编译到源码&quot;">​</a></h1><p><strong><strong><strong><strong><img src="https://img2022.cnblogs.com/blog/1161361/202208/1161361-20220819142823068-919381418.png" alt=""></strong></strong></strong></strong></p><p><strong>首先得说一下，vue项目中<code>productionSourceMap</code>这个属性。该属性对应的值为<code>true</code>|<code>false</code>。</strong></p><p><em>当<code>productionSourceMap: true,</code>时：<br> 1、打包后能看到<code>xxxx.js.map</code>文件,<code>map文件够通过反编译看到源码</code>;<br> 2、打包后会导致文件变大(因为多了很多map文件导致的)；<br> 当<code>productionSourceMap: false,</code>时：<br> 1、打包后无法看到<code>xxxx.js.map</code>文件,<code>所以无法进行反编译</code>;<br> 2、打包后的文件很小(因为没有map文件);<br><strong>如下两张截图就可以验证2的描述</strong></em></p><p><code>productionSourceMap: **false**</code>，打包后文件的大小2.8M</p><p><img src="https://img2022.cnblogs.com/blog/1161361/202208/1161361-20220819140655037-1030471922.png" alt=""></p><p><code>productionSourceMap: true</code>，打包后文件的大小9.6M</p><p><img src="https://img2022.cnblogs.com/blog/1161361/202208/1161361-20220819140714849-168784945.png" alt=""></p><h4 id="那么对于productionsourcemap-true的情况-我们如何对打包后的通过编译看到源码呢" tabindex="-1">那么对于<code>productionSourceMap: true</code>的情况，我们如何对打包后的通过编译看到源码呢 <a class="header-anchor" href="#那么对于productionsourcemap-true的情况-我们如何对打包后的通过编译看到源码呢" aria-label="Permalink to &quot;那么对于`productionSourceMap: true`的情况，我们如何对打包后的通过编译看到源码呢&quot;">​</a></h4><ul><li><p>步骤一：全局安装reverse-sourcemap，终端输入如下内容<br><code>sudo npm install --global reverse-sourcemap</code></p></li><li><p>步骤二：以<code>0.474fa9e4cdfb9c4219bc.js.map</code>文件为例进行反编译。</p><p><img src="https://upload-images.jianshu.io/upload_images/2364940-bb9a64dcff69c893.png" alt=""></p></li><li><p>步骤三：为了更加直观看到效果，先将步骤二的<code>0.474fa9e4cdfb9c4219bc.js.map</code>文件放到自定义的<code>aimFile</code>目录中</p><p><img src="https://upload-images.jianshu.io/upload_images/2364940-55a6766f58292a02.png" alt=""></p></li><li><p>步骤四：打开terminal终端，cd到<code>aimFile</code>目录，然后输入<code>reverse-sourcemap --output-dir sourceCode 0.474fa9e4cdfb9c4219bc.js.map</code>，实现将反编译后的源码输入到<code>sourceCode</code>目录</p><p><img src="https://upload-images.jianshu.io/upload_images/2364940-8f7ecb8ad13cf60d.png" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/2364940-94fe13f754e6c154.png" alt=""></p></li><li><p>步骤五：可以看到反编译成功了，而且也可以得知<code>xxxx.js.map</code>文件经过反编译后得到的源文件，实际上是很多文件的集合。</p></li></ul>',10),s=[p];function t(d,u,i,l,n,m){return o(),c("div",null,s)}const b=e(r,[["render",t]]);export{_ as __pageData,b as default};
