import{_ as s,o as a,c as n,N as l}from"./chunks/framework.60272d8a.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/js/对数据处理的5个API.md","lastUpdated":1706686109000}'),p={name:"guide/js/对数据处理的5个API.md"},o=l(`<h2 id="javascript-对数据处理的5个api" tabindex="-1">JavaScript 对数据处理的5个API <a class="header-anchor" href="#javascript-对数据处理的5个api" aria-label="Permalink to &quot;JavaScript 对数据处理的5个API&quot;">​</a></h2><p>在 JavaScript 中，对数值进行四舍五入操作的场景有以下几种：</p><ul><li>向上取整：ceil</li><li>向下取整：floor</li><li>四舍五入：round</li><li>固定精度：toFixed</li><li>固定长度：toPrecision</li><li>取整：parseInt、位运算</li></ul><h2 id="向上取整-ceil" tabindex="-1">向上取整： ceil <a class="header-anchor" href="#向上取整-ceil" aria-label="Permalink to &quot;向上取整： ceil&quot;">​</a></h2><p>ceil 是<code>天花板</code>的意思，表示在一个数值之上，且距离该数最近的整数。ceil 是 Math 对象的静态方法，需要传递一个参数，其调用方法如下：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ceil</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">12.34</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">//13</span></span>
<span class="line"><span style="color:#BABED8;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ceil</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">12.68</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">//13</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="向下取整-floor" tabindex="-1">向下取整： floor <a class="header-anchor" href="#向下取整-floor" aria-label="Permalink to &quot;向下取整： floor&quot;">​</a></h2><p>floor 是<code>地板</code>的意思，表示在一个数值之下，且距离该数最近的整数。floor 是 Math 对象的静态方法，需要传递一个参数，其调用方法如下：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">floor</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">12.34</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 12</span></span>
<span class="line"><span style="color:#BABED8;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">floor</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">12.68</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 12</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="四舍五入-round" tabindex="-1">四舍五入： round <a class="header-anchor" href="#四舍五入-round" aria-label="Permalink to &quot;四舍五入： round&quot;">​</a></h2><p>round 的作用是对一个浮点数进行四舍五入，并保留整数位。round 也是 Math 对象的静态方法，也需要传递一个参数，其调用方法如下：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">round</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">12.34</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 12</span></span>
<span class="line"><span style="color:#BABED8;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">round</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">12.54</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 13</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="固定精度-tofixed" tabindex="-1">固定精度： toFixed <a class="header-anchor" href="#固定精度-tofixed" aria-label="Permalink to &quot;固定精度： toFixed&quot;">​</a></h2><p>toFixed 和上面三个方法不同，它是 Number 原型上实现的一个方法，其作用是对一个浮点数进行四舍五入并保留固定小数位。 toFixed 需要传递一个参数，其调用方式如下：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">100.456001</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toFixed</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">2</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 100.46</span></span>
<span class="line"><span style="color:#F78C6C;">100.456001</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toFixed</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 100.456</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="固定长度-toprecision" tabindex="-1">固定长度： toPrecision <a class="header-anchor" href="#固定长度-toprecision" aria-label="Permalink to &quot;固定长度： toPrecision&quot;">​</a></h2><p>toPrecison 也是 Number 原型上实现的一个处理浮点数的方法，和 toFixed 不同的是，它是对一个浮点数进行四舍五入并保留固定长度的有效数字，包括整数部分。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">99.456001</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toPrecision</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">5</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;">// 99.456</span></span>
<span class="line"><span style="color:#F78C6C;">100.456001</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toPrecision</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">5</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 100.46</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="取整-parseint" tabindex="-1">取整： parseInt <a class="header-anchor" href="#取整-parseint" aria-label="Permalink to &quot;取整： parseInt&quot;">​</a></h2><p>parseInt 是 全局对象 window上的一个方法，其作用是对一个可转换的数值取整，分为以下两种情况：</p><ol><li><p>将字符串数值转化为 Number 整数，对字符串的每一个字符进行转化，直到遇到不可转化的字符（包括小数点）停止。</p></li><li><p>对浮点类型数值取整，忽略小数部分，不做四舍五入处理</p></li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 字符串数值</span></span>
<span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">100</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 100</span></span>
<span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">100axt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 100</span></span>
<span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">100xh20</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 100</span></span>
<span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">100.78</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 123</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Number 类型</span></span>
<span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">100.12</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 100</span></span>
<span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">100.78</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 100</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="取整-位运算" tabindex="-1">取整： 位运算 <a class="header-anchor" href="#取整-位运算" aria-label="Permalink to &quot;取整： 位运算&quot;">​</a></h2><ul><li><code>| 0 ： 和 0 进行 按位或 操作，原值不变</code></li><li><code>~~ ： 两次 按位非 操作得到的也是原值</code></li><li><code>&gt;&gt; 0 ： 右移 0 位</code></li><li><code>&lt;&lt; 0 ： 左移 0 位</code></li><li><code>&gt;&gt;&gt; 0： 无符号右移 0 位</code></li></ul><h2 id="这些位运算符在实现取整操作时-会表现出一些共同的特征" tabindex="-1">这些位运算符在实现取整操作时，会表现出一些共同的特征： <a class="header-anchor" href="#这些位运算符在实现取整操作时-会表现出一些共同的特征" aria-label="Permalink to &quot;这些位运算符在实现取整操作时，会表现出一些共同的特征：&quot;">​</a></h2><ul><li>对于 Number 类型来说，直接应用位操作， 和 parseInt 得到的结果几乎一样；</li><li>对于其他类型，内部会先通过 Number() 将其转换为一个数值，然后再应用位操作。</li><li>对特殊 NaN 和 Infinity 值应用位操作时，这两个值都会被当成 0 来处理 。</li><li>对于 Number 类型，直接应用位运算。</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">~~</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">100.12</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;">//  100         </span></span>
<span class="line"><span style="color:#F78C6C;">100.78</span><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;">  </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">//  100    </span></span>
<span class="line"><span style="color:#F78C6C;">100.45</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#BABED8;">  </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">//  100    </span></span>
<span class="line"><span style="color:#F78C6C;">100.50</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#BABED8;">  </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">   </span><span style="color:#676E95;font-style:italic;">// 100      </span></span>
<span class="line"><span style="color:#F78C6C;">100.96</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">//  100    </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="对于其他类型-先使用-number-转换为数值类型-再进行位运算。" tabindex="-1">对于其他类型，先使用 Number() 转换为数值类型，再进行位运算。 <a class="header-anchor" href="#对于其他类型-先使用-number-转换为数值类型-再进行位运算。" aria-label="Permalink to &quot;对于其他类型，先使用 Number() 转换为数值类型，再进行位运算。&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">~~</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">100.12</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;">// 100， Number(&#39;100.12&#39;) == 100.12</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">100.50</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;">// 100，Number(&#39;100.50&#39;) == 100.50</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">100.96</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;">// 100，Number(&#39;100.96&#39;) == 100.96</span></span>
<span class="line"><span style="color:#89DDFF;">~~</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;">// 0 , Number(&#39;abc&#39;) == NaN</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">12abc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;">// 0, Number(&#39;12abc&#39;) == NaN</span></span>
<span class="line"><span style="color:#89DDFF;">undefined</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 0, Number(undefined) == NaN</span></span>
<span class="line"><span style="color:#89DDFF;">~~null;</span><span style="color:#BABED8;">      </span><span style="color:#676E95;font-style:italic;">// 0 , Number(null) == 0</span></span>
<span class="line"><span style="color:#FF9CAC;">true</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 1 , Number(true) == 1</span></span>
<span class="line"><span style="color:#FF9CAC;">false</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">//0 , Number(false) == 0</span></span>
<span class="line"><span style="color:#BABED8;">[]  </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">     </span><span style="color:#676E95;font-style:italic;">// 0 , Number([]) == 0</span></span>
<span class="line"><span style="color:#89DDFF;">~~NaN;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#89DDFF;">Infinity</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 0</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>位运算作用于最基本的层次上，即按内存中表示数值的位来操作数值。</p><h2 id="位运算能取整的原因是" tabindex="-1">位运算能取整的原因是： <a class="header-anchor" href="#位运算能取整的原因是" aria-label="Permalink to &quot;位运算能取整的原因是：&quot;">​</a></h2><p>ECMAScript 中的数值以64位双精度浮点数存储，但位运算只能作用于整数，因此要先将 64 位的浮点数转换成 32 位的整数，然后再进行位运算，最后再将计算结果转换成64位浮点数存储。</p>`,32),e=[o];function t(r,c,i,y,D,F){return a(),n("div",null,e)}const u=s(p,[["render",t]]);export{d as __pageData,u as default};
