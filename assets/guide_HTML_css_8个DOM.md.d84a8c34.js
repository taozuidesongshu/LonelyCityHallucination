import{_ as s,o as n,c as a,N as l}from"./chunks/framework.60272d8a.js";const B=JSON.parse('{"title":"不容忽视的 8 个 DOM API","description":"","frontmatter":{},"headers":[],"relativePath":"guide/HTML&css/8个DOM.md","lastUpdated":1706686109000}'),e={name:"guide/HTML&css/8个DOM.md"},p=l(`<h1 id="不容忽视的-8-个-dom-api" tabindex="-1">不容忽视的 8 个 DOM API <a class="header-anchor" href="#不容忽视的-8-个-dom-api" aria-label="Permalink to &quot;不容忽视的 8 个 DOM API&quot;">​</a></h1><h2 id="_1-使用-addeventlistener-方法与-options" tabindex="-1">1. 使用 addEventListener() 方法与 options <a class="header-anchor" href="#_1-使用-addeventlistener-方法与-options" aria-label="Permalink to &quot;1\\. 使用 addEventListener() 方法与 options&quot;">​</a></h2><p>最常用的DOM方法之一是 <code>addEventListener()</code> ，它允许我们将事件监听器附加到元素上。除了事件类型和回调函数之外， <code>addEventListener()</code> 还接受一个 <code>options</code> 对象，允许我们定义其他属性。这些属性包括 <code>capture</code> ， <code>once</code> 和 <code>passive</code> 。让我们进一步探讨它们。</p><h4 id="capture" tabindex="-1">capture <a class="header-anchor" href="#capture" aria-label="Permalink to &quot;capture&quot;">​</a></h4><p><code>capture</code> 属性是一个布尔值，用于确定事件处理程序在事件传播阶段中的执行顺序。当 <code>capture</code> 设置为 <code>true</code> 时，在到达目标元素之前，事件会在捕获阶段被捕获。如果设置为 <code>false</code> 或者省略，则事件会在冒泡阶段处理，即在事件到达目标元素之后。</p><h4 id="once" tabindex="-1">once <a class="header-anchor" href="#once" aria-label="Permalink to &quot;once&quot;">​</a></h4><p><code>once</code> 属性是另一个布尔值。当设置为 <code>true</code> 时，表示事件监听器只会被触发一次，然后自动移除。这样就不需要使用 <code>removeEventListener()</code> 手动移除事件监听器了。</p><h4 id="passive" tabindex="-1">passive <a class="header-anchor" href="#passive" aria-label="Permalink to &quot;passive&quot;">​</a></h4><p><code>passive</code> 属性是一个布尔值，当设置为 <code>true</code> 时，表示事件监听器将永远不会调用 <code>preventDefault()</code> 方法，即使它包含在函数体中。这对于改善滚动和触摸事件处理程序的性能非常有用。</p><p>让我们来看一个使用 <code>options</code> 对象和 <code>addEventListener()</code> 的例子：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> button </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myButton</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">button</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> handleClick</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">once</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">handleClick</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Button clicked!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在上面的例子中， <code>handleClick</code> 函数只会在按钮被点击时被调用一次，这要归功于将 <code>once</code> 属性设置为 <code>true</code> 。这样就不需要手动删除事件监听器了。</p><h2 id="_2-使用-scrollto-方法实现平滑滚动" tabindex="-1">2. 使用 scrollTo() 方法实现平滑滚动 <a class="header-anchor" href="#_2-使用-scrollto-方法实现平滑滚动" aria-label="Permalink to &quot;2\\. 使用 scrollTo() 方法实现平滑滚动&quot;">​</a></h2><p><code>scrollTo()</code> 方法于 window 对象，并指示浏览器滚动到页面上的指定位置。默认情况下， <code>scrollTo()</code> 执行突然滚动，类似于使用带有指定哈希URL的本地链接。然而，通过结合 <code>ScrollToOptions</code> 对象，我们可以实现平滑的动画滚动效果。</p><p>看一个例子：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">scrollTo</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">top</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">behavior</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">smooth</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在这个例子中，页面将平滑滚动到垂直位置 <code>1000</code> 像素。设置 <code>behavior</code> 属性为 &#39;smooth&#39; 确保滚动效果是动画的。如果 <code>behavior</code> 属性设置为 <code>&#39;auto&#39;</code> ，滚动将是突然的。</p><h2 id="_3-与-classlist-一起进行类操作" tabindex="-1">3. 与 classList 一起进行类操作 <a class="header-anchor" href="#_3-与-classlist-一起进行类操作" aria-label="Permalink to &quot;3\\. 与 classList 一起进行类操作&quot;">​</a></h2><p>在JavaScript中，当与元素一起工作时，类操作是一项常见任务。 <code>classList</code> 属性提供了一组方法，简化了在元素上添加、删除和切换类的操作。</p><p>我们来探索一下 <code>classList</code> 属性上可用的一些方法：</p><ul><li><code>add(className)</code> ：将一个类添加到元素的类列表中。</li><li><code>remove(className)</code> ：从元素的类列表中移除一个类。</li><li><code>toggle(className)</code> ：切换元素的类列表中的类的存在。</li><li><code>contains(className)</code>：检查元素是否具有特定的类。</li></ul><p>这是一个使用这些方法的示例：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> element </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myElement</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">element</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">classList</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">active</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">element</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">classList</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">remove</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">inactive</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">element</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">classList</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toggle</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">highlight</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(element</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">classList</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">contains</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">active</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在这个例子中，我们给 <code>element</code> 添加了类 <code>&#39;active&#39;</code> ，移除了类 <code>&#39;inactive&#39;</code> ，并切换了类 <code>&#39;highlight&#39;</code> 。然后， <code>contains()</code> 方法会检查元素是否具有类 <code>&#39;active&#39;</code> 。</p><h2 id="_4-matches-元素匹配的方法" tabindex="-1">4.matches() 元素匹配的方法 <a class="header-anchor" href="#_4-matches-元素匹配的方法" aria-label="Permalink to &quot;4.matches() 元素匹配的方法&quot;">​</a></h2><p><code>matches()</code> 方法是一个强大的元素匹配工具。它允许我们检查一个元素是否与特定的CSS选择器匹配。</p><p>这是一个使用 <code>matches()</code> 方法的示例：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> element </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myElement</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> (element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">matches</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.container .item</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">The element matches the selector</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">The element does not match the selector</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在这个例子中，我们检查 <code>element</code> 是否与选择器 <code>.container .item</code> 匹配。如果匹配，将记录第一条消息；否则，将记录第二条消息。</p><p>当你想根据元素是否匹配特定选择器执行某些操作时， <code>matches()</code> 方法非常有用。它消除了手动遍历DOM或使用复杂的CSS选择器匹配逻辑的需要。</p><h2 id="_5-使用-dataset-访问和修改数据属性" tabindex="-1">5. 使用 <code>dataset</code> 访问和修改数据属性 <a class="header-anchor" href="#_5-使用-dataset-访问和修改数据属性" aria-label="Permalink to &quot;5\\. 使用 \`dataset\` 访问和修改数据属性&quot;">​</a></h2><p>数据属性提供了一种在HTML元素上存储自定义数据的方式。属性允许我们以编程的方式访问和操作元素上的数据属性。</p><p>考虑一个例子</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myElement</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">data-info</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">important</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在这个例子中， <code>&lt;div&gt;</code> 元素具有一个名为 <code>data-info</code> 的数据属性，其值为 <code>&#39;important&#39;</code> 。我们可以使用 <code>dataset</code> 属性访问和修改这个数据属性。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> element </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myElement</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(element</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">dataset</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">info)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// &#39;important&#39;</span></span>
<span class="line"><span style="color:#BABED8;">element</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">dataset</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">info </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">updated</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(element</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">dataset</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">info)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// &#39;updated&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在这个例子中，我们使用 <code>dataset</code> 属性访问 <code>data-info</code> 属性的值，并返回值 <code>&#39;important&#39;</code> 。我们还可以通过给 <code>element.dataset.info</code> 赋新值来修改该值。</p><h2 id="_6-平滑动画的方法" tabindex="-1">6. 平滑动画的方法 <a class="header-anchor" href="#_6-平滑动画的方法" aria-label="Permalink to &quot;6\\. 平滑动画的方法&quot;">​</a></h2><p>在网页上为元素添加动画效果是一个常见的需求，但有时候也是一项具有挑战性的任务。 <code>element.animate()</code> API通过提供一种简单直接的方式来创建流畅且响应灵敏的动画，简化了这个过程。它允许我们对各种CSS属性进行动画处理，例如透明度、宽度、高度和变换，并且可以自定义时间和缓动函数。让我们来看一个例子：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> element </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myElement</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">animate</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#BABED8;">  [</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">opacity</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">transform</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">scale(0.5)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">opacity</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">transform</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">scale(1)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">duration</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">easing</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ease-in-out</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">fill</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">both</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>在上面的例子中，我们将元素的不透明度和缩放从<code>0.5</code>动画到<code>1</code>，持续时间为<code>1000</code>毫秒。属性 <code>easing</code> 定义了动画的时间函数，而 <code>fill: &#39;both&#39;</code> 确保元素在动画完成后保持其动画状态。</p><p><code>animate()</code> 方法的第二个参数有很多选项，但它们的浏览器兼容性不一致，需要额外注意。</p><h2 id="_7-全屏模式的方法" tabindex="-1">7. 全屏模式的方法 <a class="header-anchor" href="#_7-全屏模式的方法" aria-label="Permalink to &quot;7\\. 全屏模式的方法&quot;">​</a></h2><p>全屏模式允许网络应用程序利用整个屏幕，提供沉浸式体验。DOM提供了 <code>requestFullscreen()</code> 方法，在元素上请求全屏模式。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> element </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myElement</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> requestFullscreen)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> enterFullscreen </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">elem</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">options</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">elem</span><span style="color:#F07178;">[</span></span>
<span class="line"><span style="color:#F07178;">    [</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">requestFullscreen</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mozRequestFullScreen</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">msRequestFullscreen</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">webkitRequestFullscreen</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    ]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">prop</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">elem</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">prop</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  ]</span><span style="color:#89DDFF;">?.</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">options</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">enterFullscreen</span><span style="color:#BABED8;">(element)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>在这个例子中，当点击 <code>element</code> 时，会调用 <code>requestFullscreen()</code> 函数，该函数尝试请求全屏模式。代码会检查不同供应商特定方法的兼容性，以确保跨浏览器支持。</p><h2 id="_8-使用-insertadjacentelement-和-insertadjacenttext-进行灵活的内容插入" tabindex="-1">8. 使用 insertAdjacentElement() 和 insertAdjacentText() 进行灵活的内容插入 <a class="header-anchor" href="#_8-使用-insertadjacentelement-和-insertadjacenttext-进行灵活的内容插入" aria-label="Permalink to &quot;8\\. 使用 insertAdjacentElement() 和 insertAdjacentText() 进行灵活的内容插入&quot;">​</a></h2><p>虽然许多开发人员熟悉 insertAdjacentHTML() 方法，该方法允许我们将HTML或文本内容插入到相对于其他元素的特定位置，但还有两种相关的方法可以提供额外的灵活性： <code>insertAdjacentElement()</code> 和 <code>insertAdjacentText()</code> 。</p><p>insertAdjacentElement() 方法允许我们将一个元素插入到指定位置的DOM中，同时将其从原始位置移除。这提供了一种方便的方式，在DOM内部将一个元素从一个地方转移到另一个地方。让我们看一个例子：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> targetElement </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">target</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> newElement </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">newElement</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">textContent </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">New Element</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">targetElement</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insertAdjacentElement</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">beforebegin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> newElement)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在这个例子中， <code>insertAdjacentElement()</code> 方法在 <code>targetElement</code> 之前插入 <code>newElement</code> 。同时， <code>newElement</code> 也从DOM的原始位置移除。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> targetElement </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">target</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> text </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello, &lt;strong&gt;World!&lt;/strong&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">targetElement</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insertAdjacentText</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">beforeend</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> text)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在这种情况下， <code>insertAdjacentText()</code> 方法将 text 作为文本节点插入到 <code>targetElement</code> 中。任何特殊字符，如HTML标签，都会以HTML实体的形式插入，保留其文本表示。</p><p>所有三种方法 - <code>insertAdjacentHTML()</code> ， <code>insertAdjacentElement()</code> 和 <code>insertAdjacentText()</code> - 都接受相同的第一个参数值，用于确定插入内容相对于目标元素的位置。选项有 &#39;beforebegin&#39; ， &#39;afterbegin&#39; ， &#39;beforeend&#39; 和 &#39;afterend&#39; 。</p>`,54),o=[p];function c(t,r,D,F,y,i){return n(),a("div",null,o)}const m=s(e,[["render",c]]);export{B as __pageData,m as default};
