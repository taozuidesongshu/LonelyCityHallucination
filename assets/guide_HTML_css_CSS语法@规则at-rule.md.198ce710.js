import{_ as e,o,c as r,N as t}from"./chunks/framework.60272d8a.js";const S=JSON.parse('{"title":"CSS语法@规则at-rule","description":"","frontmatter":{},"headers":[],"relativePath":"guide/HTML&css/CSS语法@规则at-rule.md","lastUpdated":1706686109000}'),p={name:"guide/HTML&css/CSS语法@规则at-rule.md"},c=t('<h1 id="css语法-规则at-rule" tabindex="-1">CSS语法@规则at-rule <a class="header-anchor" href="#css语法-规则at-rule" aria-label="Permalink to &quot;CSS语法@规则at-rule&quot;">​</a></h1><hr><p>相信很多小伙伴都用过 CSS 的屏幕宽度媒体查询，比如这样：</p><p>这里表示的是与屏幕宽度相关的样式设置，上面的代码表示当屏幕宽度大于 900px 时，内部的样式代码块才能生效。</p><p>其实不仅仅是上面的屏幕宽度媒体查询，在 CSS 中，存在大量的以<code>@</code>符号开头的规则。称之为<code>@规则</code>(<strong>at-rule</strong>)。本文就将介绍一下除去媒体查询之外，其他有意思的且在未来会越来越重要的<code>@规则</code>规则。</p><h2 id="at-rule-规则" tabindex="-1">at-rule @规则 <a class="header-anchor" href="#at-rule-规则" aria-label="Permalink to &quot;at-rule @规则&quot;">​</a></h2><p>@规则（at-rule ）是什么呢？</p><p>一个<strong>at-rule</strong>是一个CSS 语句，以 at 符号开头， ‘<code>@</code>‘ (<code>U+0040 COMMERCIAL AT</code>), 后跟一个标识符，并包括直到下一个分号的所有内容， ‘<code>;</code>‘ (<code>U+003B SEMICOLON</code>), 或下一个 CSS 块，以先到者为准。</p><p>除去我们最为熟悉的<code>@media</code>之外，CSS 还有哪些 @规则 呢？</p><p>下面是一些 @规则，由它们的标示符指定，每种规则都有不同的语法：</p><ul><li><code>@charset</code>, 定义样式表使用的字符集。</li><li><code>@import</code>, 告诉 CSS 引擎引入一个外部样式表。</li><li><code>@namespace</code>, 告诉 CSS 引擎必须考虑 XML 命名空间。</li></ul><p>下面是一些嵌套 @ 规则，是嵌套语句的子集，不仅可以作为样式表里的一个语句，也可以用在条件规则组里：</p><ul><li><code>@media</code>，如果满足媒介查询的条件则条件规则组里的规则生效。</li><li><code>@page</code>，描述打印文档时布局的变化。</li><li><code>@font-face</code>，描述将下载的外部的字体。</li><li><code>@keyframes</code>，描述 CSS 动画的中间步骤。</li><li><code>@supports</code>, 如果满足给定条件则条件规则组里的规则生效。</li><li><code>@document</code>，如果文档样式表满足给定条件则条件规则组里的规则生效。<em>(推延至 CSS Level 4 规范)</em></li><li><code>@viewport</code>（<strong>已废弃</strong>），规则让我们可以对文档的大小进行设置。这个特性主要被用于移动设备，但是也可以用在支持类似“固定到边缘”等特性的桌面浏览器，如微软的 Edge。</li><li><code>@counter-style</code>— 一个<code>@counter-style</code>规则定义了如何把一个计数器的值转化为字符串表示。</li><li><code>@font-feature-values</code>(plus<code>@swash</code>,<code>@ornaments</code>,<code>@annotation</code>,<code>@stylistic</code>,<code>@styleset</code>and<code>@character-variant</code>)， 允许作者在font-variant-alternates中使用通用名称，用于在 OpenType 中以不同方式激活功能。它允许在使用几种字体时简化 CSS。</li><li><code>@property</code>（<strong>实验性</strong>），是CSS HoudiniAPI 的一部分，它允许开发者显式地定义他们的css 自定义属性, 允许进行属性类型检查、设定默认值以及定义该自定义属性是否可以被继承。</li><li><code>@layer</code>， 声明了一个 级联层，同一层内的规则将级联在一起，这给予了开发者对层叠机制的更多控制。</li></ul><p>除去我们非常熟悉的<code>@media</code>、<code>keyframes</code>以及<code>@font-face</code>，像是<code>@supports</code>、<code>@counter-style</code>、<code>@property</code>、<code>@layer</code>等都已经或将在未来 Web 应用中扮演举足轻重的作用。</p><p>下面，就跟随本文，一起对它们一探究竟。你也可以跳过你已经掌握的，翻到对应你还不太了解的 @ 规则下，迅速了解它们。</p><h2 id="charset、-import、-namespace" tabindex="-1">@charset、@import、@namespace <a class="header-anchor" href="#charset、-import、-namespace" aria-label="Permalink to &quot;@charset、@import、@namespace&quot;">​</a></h2><p>这三个可以放在一起讲解，他们的语法比较简单，也相对好理解。其中：</p><p>1、<code>@charset</code>：指定样式表中使用的字符编码。它必须是样式表中的第一个元素，而前面不得有任何字符。</p><p>像这样：</p><p>注意，如果有多个 @charset @规则被声明，只有第一个会被使用。</p><p>很多人会有疑惑，这个声明到底有什么用呢？</p><p>事实上，如果 CSS 文件中有任何非 ASCII 文本，例如字体名称，伪元素的 content 属性值、选择器等中的非 ASCII 字符，都需要确保 CSS 解析器知道如何转换字节正确转换为字符，以便它理解 CSS 代码。</p><p>所以如果当你发现你的伪元素 content 中插入了一些内容，但是经过打包编译后它乱码了，很有可能是因为你忘了声明这个字符集。</p><p>2、<code>@import</code>：用于从其他样式表导入样式规则。这些规则必须先于所有其他类型的规则，<code>@charset</code>规则除外</p><p>@import 有两种语法：</p><ol><li>url() 内包含 style sheet 的 URI</li><li>直接写 style sheet 的 URI 的字符串</li></ol><p>还可以直接在后面定义媒体查询规则，像是这样：</p><p>合理的使用<code>@import</code>其实也是有好处的：</p><ol><li>可以合理的控制 CSS 文件的大小</li><li>更好的分治与复用</li></ol><p>很多人可能会经常看到，网络上会有各种<strong>抵制 @import</strong>的文章，不过既然设计了 @import，总有它的有用之处，不能过于绝对。使用<code>@import</code>影响页面性能的地方主要体现在两个方面：</p><ol><li>影响浏览器的并行下载</li><li>优先级问题，样式互相覆盖</li><li>导致页面闪烁</li></ol><p>这里可以简单解释一下。首先我们得知道，加载页面时，link 标签引入的 CSS 被同时加载，而 @import 引入的 CSS 将在页面加载完毕后被加载。</p><p>CSS 解析引擎在对一个 CSS 文件进行解析时，如在文件顶部遇到<code>@import</code>规则，将被替换为该 @import 导入的 CSS 文件中的全部样式。而<code>@import</code>内的规则其后被加载，却会在加载完毕后置于样式表顶部，最终渲染时，如果存在同名同优先级样式，会被下面的同名样式层叠，导致所谓的优先级冲突。</p><p>实际上，浏览器渲染的动作一般会执行多次的。最后一次渲染，一定是基于之前加载过的所有样式整合后渲染树进行绘制页面的，<br> 而由于<code>@import</code>内的规则的加载时机问题，会在页面内容加载完后再加载。相当于把 CSS 放在了 body 底部，从而造成了页面的闪烁。当网络较差时，闪烁体验更为明显。</p><p>3、<code>@namespace</code>：<code>@namespace</code>是用来定义使用在 CSS 样式表中的 XML 命名空间的 @规则。定义的命名空间可以把通配、元素和属性选择器限制在指定命名空间里的元素。</p><p>并且，任何 @namespace 规则都必须在所有的<code>@charset</code>和<code>@import</code>规则之后，并且在样式表中，位于其他任何样式声明之前。</p><p>总的来说，<code>@namespace</code>在现如今的 CSS 生态中，属于非常冷门的一个规则。基本上我从业这么久，没怎么见过这个属性的具体使用。</p><h2 id="media、-keyframes、-font-face" tabindex="-1">@media、@keyframes、@font-face <a class="header-anchor" href="#media、-keyframes、-font-face" aria-label="Permalink to &quot;@media、@keyframes、@font-face&quot;">​</a></h2><p>这三个 @ 规则，大家应该非常熟悉。</p><ul><li><code>@media</code>：如果满足媒介查询的条件则条件规则组里的规则生效</li><li><code>@keyframes</code>：定义 CSS 动画的中间步骤</li><li><code>@font-face</code>：描述将下载的外部的字体</li></ul><p><code>@keyframes</code>和<code>@font-face</code>这两个大家肯定非常熟悉。</p><p>但是<code>@media</code>其实内有乾坤！除了屏幕宽度媒体查询外，其实还存在非常多不同功能的媒体查询！</p><p>下面我会列出一些在未来，我认为会越来越被提及使用到的<code>@media</code>规则。</p><h3 id="prefers-reduced-motion-减弱动画效果" tabindex="-1">prefers-reduced-motion 减弱动画效果 <a class="header-anchor" href="#prefers-reduced-motion-减弱动画效果" aria-label="Permalink to &quot;prefers-reduced-motion 减弱动画效果&quot;">​</a></h3><p>prefers-reduced-motion 规则查询用于减弱动画效果，除了默认规则，只有一种语法取值<code>prefers-reduced-motion: reduce</code>，开启了该规则后，相当于告诉用户代理，希望他看到的页面，可以删除或替换掉一些会让部分视觉运动障碍者不适的动画类型。</p><blockquote><p>规范原文：Indicates that user has notified the system that they prefer an interface that removes or replaces the types of motion-based animation that trigger discomfort for those with vestibular motion disorders.</p><p>vestibular motion disorders 是一种视觉运动障碍患者，中文我只能谷歌翻译，翻译出来是<strong>前庭运动障碍</strong>，我感觉不太对，谷歌了一下是一种会导致眩晕的一类病症，譬如一个动画一秒闪烁多次，就会导致患者的不适。</p></blockquote><p>使用方法，还是上面那段代码：</p><p>如果我们有一些类似这样的动画：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1667454806-2db1f201812a3f5.gif" alt="prefers-reduced-motion 减弱动画效果"></p><p>在用户开启了<code>prefers-reduced-motion: reduce</code> 时，就应该把它去掉。那么该如何开启这个选项呢？<a href="https://www.mybj123.com/gohref.php?url=https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/prefers-reduced-motion" target="_blank" rel="noreferrer">MDN — prefers-reduced-motion</a>给出的是：</p><ul><li>在 GTK/Gnome 中，可以通过 GNOME Tweaks （在“通用”或“外观”菜单中，取决于具体版本） 的配置，设置 gtk-enable-animations 的值为 false</li><li>可以在 GTK 3 的配置文件中的 [Settings] 模块下设置 gtk-enable-animations = false</li><li>在 Windows 10 中：设置 &gt; 轻松获取 &gt; 显示 &gt; 在 Windows 中显示动画</li><li>在 Windows 7 中：控制面板 &gt; 轻松获取 &gt; ?是计算机更易于查看 &gt; 关闭不必要动画</li><li>在 MacOS 中：系统偏好 &gt; 辅助使用 &gt; 显示 &gt; 减少运动</li><li>在 iOS 上：设置 &gt; 通用 &gt; 辅助性 &gt; 减少运动</li><li>在 Android 9+ 上：设置 &gt; 辅助性 &gt; 移除动画</li></ul><h3 id="prefers-color-scheme-适配明暗主题" tabindex="-1">prefers-color-scheme 适配明暗主题 <a class="header-anchor" href="#prefers-color-scheme-适配明暗主题" aria-label="Permalink to &quot;prefers-color-scheme 适配明暗主题&quot;">​</a></h3><p><code>prefers-color-scheme</code>还是非常好理解的，它用于匹配用户通过操作系统设置的明亮或夜间（暗）模式。它有两个不同的取值：</p><ul><li><code>prefers-color-scheme: light</code>： 明亮模式</li><li><code>prefers-color-scheme: dark</code>： 夜间（暗）模式</li></ul><p>语法如下，如果我们默认的是明亮模式，只需要适配夜间模式即可：</p><p>当然，上述只是 CSS 代码示意，要做到两套主题的切换肯定不是这么简单，方法也很多，本文不赘述，读者可以自行了解各种实现主题切换，或者是明暗切换的方案。</p><h3 id="prefers-contrast-调整内容色彩对比度" tabindex="-1">prefers-contrast 调整内容色彩对比度 <a class="header-anchor" href="#prefers-contrast-调整内容色彩对比度" aria-label="Permalink to &quot;prefers-contrast 调整内容色彩对比度&quot;">​</a></h3><p><code>prefers-contrast</code>该 CSS 媒体功能是用来检测用户是否要求将网页内容以更高或者更低的对比度进行呈现。其中：</p><ul><li><code>prefers-contrast: no-preference</code>：默认值，不作任何变化</li><li><code>prefers-contrast: less</code>：希望使用对比度更低的界面</li><li><code>prefers-contrast: more</code>：希望使用对比度更高的界面</li></ul><p>以<code>prefers-contrast: less</code>为例子，语法如下：</p><p>上面只是伪 CSS 代码，具体可能需要对具体的一些元素进行处理，或者使用<code>filter: contrast()</code>全局统一处理，当开启配置时，用于实现类似这样的功能：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1667454908-b10c39204050429.png" alt="prefers-contrast 调整内容色彩对比度"></p><h4 id="什么是色彩对比度" tabindex="-1">什么是色彩对比度 <a class="header-anchor" href="#什么是色彩对比度" aria-label="Permalink to &quot;什么是色彩对比度&quot;">​</a></h4><p>是否曾关心过页面内容的展示，使用的颜色是否恰当？色弱、色盲用户能否正常看清内容？良好的色彩使用，在任何时候都是有益的，而且不仅仅局限于对于色弱、色盲用户。在户外用手机、阳光很强看不清，符合无障碍标准的高清晰度、高对比度文字就更容易阅读。</p><p>这里就有一个概念 —<strong>颜色对比度</strong>，简单地说，描述就是两种颜色在亮度（Brightness）上的差别。运用到我们的页面上，大多数的情况就是背景色（background-color）与内容颜色（color）的对比差异。</p><p>最权威的互联网无障碍规范 ——<a href="https://www.mybj123.com/gohref.php?url=https://www.w3.org/Translations/WCAG21-zh/" target="_blank" rel="noreferrer">WCAG AA</a>规范规定，所有重要内容的色彩对比度需要达到 4.5:1 或以上（字号大于18号时达到 3:1 或以上），才算拥有较好的可读性。</p><h3 id="prefers-reduced-transparency-减少透明元素" tabindex="-1">prefers-reduced-transparency 减少透明元素 <a class="header-anchor" href="#prefers-reduced-transparency-减少透明元素" aria-label="Permalink to &quot;prefers-reduced-transparency 减少透明元素&quot;">​</a></h3><p><code>prefers-reduced-transparency</code>该 CSS 媒体功能是用来检测用户是否要求减少网页中的透明元素：</p><ul><li><code>prefers-contrast: no-preference</code>：默认值，不作任何变化</li><li><code>prefers-contrast: reduce</code>：希望界面元素存在尽可能少的透明元素</li></ul><p>以<code>prefers-contrast: reduce</code>为例子，语法如下：</p><p>兼容性如下：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1667455692-3cbb145354438de.png" alt="兼容性"></p><h3 id="prefers-reduced-data-减少数据传输" tabindex="-1">prefers-reduced-data 减少数据传输 <a class="header-anchor" href="#prefers-reduced-data-减少数据传输" aria-label="Permalink to &quot;prefers-reduced-data 减少数据传输&quot;">​</a></h3><p>对于部分网速较差的地区，或者流量很贵的情况，用户会希望减少页面中的流量请求，基于此有了<code>prefers-reduced-data</code>。</p><p><code>prefers-reduced-data</code>该 CSS 媒体查询功能是用于告知用户代理，希望减少页面的流量请求。</p><ul><li><code>prefers-reduced-data: no-preference</code>：默认值，不作任何变化</li><li><code>prefers-reduced-data: reduce</code>：希望界面元素消耗更少的互联网流量</li></ul><p>以<code>prefers-reduced-data: reduce</code>为例子，语法如下：</p><p>当检测到用户开启了<code>prefers-reduced-data: reduce</code>，我们将提供压缩度更高，尺寸更小，消耗流量更少的图片。</p><p>当然，上述代码只是个示意，我们可以做的其实有更多。</p><p>不过，这是仍处于实验室的功能，暂时没有任何浏览器支持该媒体查询~ 😢</p><p>当然，从 Chrome 85+ 开始，可以通过开启<code>#enable-experimental-web-platform-features</code>实验室选项开启该功能！</p><h2 id="supports特性检测" tabindex="-1">@supports特性检测 <a class="header-anchor" href="#supports特性检测" aria-label="Permalink to &quot;@supports特性检测&quot;">​</a></h2><p>好，介绍完一些后续会非常重要从<code>@media</code>规则后，我们来看看<code>@supports</code>。</p><p>传统的 CSS 特性检测都是通过 javascript 实现的，但是如今，原生 CSS 即可实现特性检测的功能。</p><p>CSS<code>@supports</code>通过 CSS 语法来实现特性检测，并在内部 CSS 区块中写入如果特性检测通过希望实现的 CSS 语句。</p><h4 id="语法" tabindex="-1">语法： <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法：&quot;">​</a></h4><p>举个例子：</p><p>上面的例子中，<code>position: sticky</code>是 position 的一个比较新的属性，用于实现黏性布局，可以轻松实现一些以往需要 Javascript 才能实现的布局，但是不一定在一些低端机型上兼容。</p><p>上面的写法，首先定义了 div 的<code>position: fixed</code>，紧接着下面一句<code>@supports (position:sticky)</code>则是特性检测括号内的内容，如果当前浏览器支持<code>@supports</code>语法，并且支持<code>position:sticky</code>语法，那么 div 的 则会被设置为<code>position:sticky</code>。</p><p>我们可以看到，<code>@supports</code>语法的核心就在于这一句：<code>@supports (...) { }</code>，括号内是一个 CSS 表达式，如果浏览器判断括号内的表达式合法，那么接下来就会去渲染括号内的 CSS 表达式。除了这种最常规的用法，还可以配合其他几个关键字：</p><h3 id="supports-not-supports-and-supports-or" tabindex="-1">@supports not&amp;&amp;@supports and&amp;&amp;@supports or <a class="header-anchor" href="#supports-not-supports-and-supports-or" aria-label="Permalink to &quot;@supports not&amp;&amp;@supports and&amp;&amp;@supports or&quot;">​</a></h3><h4 id="supports-not—-非" tabindex="-1"><code>@supports not</code>— 非 <a class="header-anchor" href="#supports-not—-非" aria-label="Permalink to &quot;`@supports not`— 非&quot;">​</a></h4><p>not 操作符可以放在任何表达式的前面来产生一个新的表达式，新的表达式为原表达式的值的否定。看个例子：</p><p>因为添加了 not 关键字，所以与上面第一个例子相反，这里如果检测到浏览器不支持 transform 这种分开单独的写法 —<code>scale: 1</code>，则将<code>.container</code>的 transform 属性合在一起写，写成<code>transform: translate(50%, 10%) rotate(80deg) scale(1.5)</code>。</p><h4 id="supports-and—-与" tabindex="-1"><code>@supports and</code>— 与 <a class="header-anchor" href="#supports-and—-与" aria-label="Permalink to &quot;`@supports and`— 与&quot;">​</a></h4><p>这个也好理解，多重判断，类似 javascript 的<code>&amp;&amp;</code>运算符符。用 <code>and</code> 操作符连接两个原始的表达式。只有两个原始表达式的值都为真，生成的表达式才为真，反之为假。</p><p>当然，<code>and</code> 可以连接任意多个表达式看个例子：</p><p>上面同时，检测<code>@supports (display:-webkit-box) and (-webkit-line-clamp:2) and (-webkit-box-orient:vertical)</code>了三个语法，如果同时支持，则设定三个 CSS 规则。这三个语法必须同时得到浏览器的支持，如果表达式为真，则可以用于实现多行省略效果：</p><p>效果如下：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1667456284-ee015b1c6a5406e.png" alt="多行省略效果"></p><h4 id="supports-or—-或" tabindex="-1"><code>@supports or</code>— 或 <a class="header-anchor" href="#supports-or—-或" aria-label="Permalink to &quot;`@supports or`— 或&quot;">​</a></h4><p>理解了<code>@supports and</code>，就很好理解<code>@supports or</code>了，与 javascript 的<code>||</code>运算符类似，表达式中只要有一个为真，则生成表达式表达式为真。</p><p>看例子：</p><p>上面的例子中，只有检测到浏览器支持<code>background:-webkit-linear-gradient(0deg, yellow, red)</code>或者（or）<code>background:linear-gradient(90deg, yellow, red)</code>其中一个，则给 div 元素添加渐变。</p><p>效果如下：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1667456427-c81e728d9d4c2f6.png" alt="div 元素添加渐变"></p><h3 id="can-i-use" tabindex="-1">Can i use？ <a class="header-anchor" href="#can-i-use" aria-label="Permalink to &quot;Can i use？&quot;">​</a></h3><p>兼容性来看，先看看<a href="https://www.mybj123.com/gohref.php?url=https://caniuse.com/?search=%40supports" target="_blank" rel="noreferrer">Can i use(更新至 2022/11/03)</a>吧：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1667456597-3823552b7a2b839.png" alt="Can i use"></p><p>大部分浏览器都已经支持了，我们已经可以开始使用起来了，使用<code>@supports</code>实现渐进增强的效果。</p><h2 id="counter-stylecss-计数器" tabindex="-1">@counter-styleCSS 计数器 <a class="header-anchor" href="#counter-stylecss-计数器" aria-label="Permalink to &quot;@counter-styleCSS 计数器&quot;">​</a></h2><p><code>@counter-style</code>：是一个 CSS at-rule，它让开发者可以自定义 counter 的样式。一个 @counter-style 规则定义了如何把一个计数器的值转化为字符串表示。</p><p>利用<code>@counter-style</code>，我们可以构建自定义的计数器样式。</p><p>当然，在<code>@counter-style</code>之前，CSS 还有一种实现简单计数器的规范，它由如下几个属性共同构成：</p><ul><li><code>counter-reset</code>： 初始化计数器的值</li><li><code>counter-increment</code>：在初始化之后，计数器的值就可以使用 counter-increment 来指定其为递增或递减</li><li><code>counter()</code>：计数器的值可以使用 counter() 或 counters() 函数以在 CSS 伪元素的 content 属性中显示</li></ul><p>我们来看最简单的一个例子，我们想实现一个 ul 布局，其中的 li 个数不定，但是均分每行的空间，并且能够自动带上序号，像是这样：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1667456661-eccbc87e4b5ce2f.png" alt="@counter-styleCSS 计数器"></p><p>使用<code>counter-reset</code>、<code>counter-increment</code>、<code>counter()</code>这一套，非常的简单就能实现，像是这样：</p><p>给每个 li 元素标序号这个事情就可以交给 CSS 计数器：</p><p>简单解释一下：</p><ol><li>在<code>ul</code>的样式中，每次都会初始化一个 CSS 计数器<code>stepCount</code>，默认值为 0</li><li>在<code>li::before</code>中的<code>counter-increment: stepCount 1</code>表示每次调用到这里，stepCount 的值加 1</li><li>最后通过<code>counter(stepCount)</code>将当前具体的计数值通过伪元素的 content 显现出来</li></ol><p>OK，那么为什么有了上述的 CSS 计数器规范后，又新增了<code>@counter-style</code>CSS 计数器规范呢？</p><h3 id="counter-style的意义" tabindex="-1"><code>@counter-style</code>的意义 <a class="header-anchor" href="#counter-style的意义" aria-label="Permalink to &quot;`@counter-style`的意义&quot;">​</a></h3><p>这是因为，上述的<code>counter-reset</code>、<code>counter-increment</code>、<code>counter()</code>这一套更多的生成的数字类型的计数器。</p><p>但是，数字类型的计数器无法满足当前全球化的排版的诉求。基于此，<code>@counter-style</code>规则用一种开放的方式弥补了这一缺点，在预定义的样式不能满足需求时，它可以使开发者自定义他们自己的计数器样式。</p><p>举个例子，我们使用 MDN 上的例子作为示例：</p><p>这样，我们就可以得到自定义的计数前缀：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1667456768-329a56e8a96a633.png" alt="自定义的计数前缀"></p><p>有了这个，我们就可以将上述的<code>symbols</code>替换成其他我们喜欢我计数图形，譬如 emoji 图形：</p><p>效果如下：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1667456850-ba323c3f5b3f1b5.png" alt="emoji效果"></p><p>完整CSS代码：</p><p>当然，实际使用过程中，<code>@counter-style</code>的语法会有一点点复杂，可选的属性也有很多，更为具体的可以仔细学习下文档 —<a href="https://www.mybj123.com/gohref.php?url=https://developer.mozilla.org/zh-CN/docs/Web/CSS/@counter-style" target="_blank" rel="noreferrer">MDN — @counter-style</a></p><h2 id="propertycss-自定义属性" tabindex="-1">@propertyCSS 自定义属性 <a class="header-anchor" href="#propertycss-自定义属性" aria-label="Permalink to &quot;@propertyCSS 自定义属性&quot;">​</a></h2><p><code>@property</code> CSS at-rule 是 CSS Houdini API 的一部分, 它允许开发者显式地定义他们的 CSS 自定义属性，允许进行属性类型检查、设定默认值以及定义该自定义属性是否可以被继承。</p><p>正常而言，我们定义和使用一个 CSS 自定义属性的方法是这样的：</p><p>而有了<code>@property</code>规则之后，我们还可以像下述代码这样去定义个 CSS 自定义属性：</p><p>简单解读下：</p><ul><li><code>@property --property-name</code>中的<code>--property-name</code>就是自定义属性的名称，定义后可在 CSS 中通过<code>var(--property-name)</code>进行引用</li><li>syntax：该自定义属性的语法规则，也可以理解为表示定义的自定义属性的类型</li><li>inherits：是否允许继承</li><li>initial-value：初始值</li></ul><p>其中，<code>@property</code>规则中的 syntax 和 inherits 描述符是必需的。</p><p>当然，在 JavaScript 内定义的写法也很简单，顺便一提：</p><h3 id="css-property-的优势" tabindex="-1">CSS @property 的优势 <a class="header-anchor" href="#css-property-的优势" aria-label="Permalink to &quot;CSS @property 的优势&quot;">​</a></h3><p>为什么要使用这么麻烦的语法定义 CSS 自定义属性呢？CSS Houdini 定义的自定义变量的优势在哪里？</p><p>我们来看这样一个例子，我们有这样一个渐变的图案：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1667457072-172d2be85ed5f9b.png" alt="渐变的图案"></p><p>我们改造下上述代码，改为使用 CSS 自定义属性：</p><p>得到的还是同样的一个渐变图。</p><p>我们再加上一个过渡效果：</p><p>鼠标 Hover 的时候，会发生什么：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1667457379-9bbc04b1af89c0e.gif" alt="鼠标 Hover 的时候"></p><p>虽然我们设定了 1s 的过渡动画<code>transition: 1s background</code>，但是很可惜，CSS 是不支持背景渐变色的直接过渡变化的，我们得到的只是两帧之间的直接变化。</p><h3 id="使用-css-property-进行改造" tabindex="-1">使用 CSS @property 进行改造 <a class="header-anchor" href="#使用-css-property-进行改造" aria-label="Permalink to &quot;使用 CSS @property 进行改造&quot;">​</a></h3><p>OK，接下来我们就使用本文的主角，使用 Houdini API 中的 CSS 自定义属性替换原本的 CSS 自定义属性。</p><p>简单进行改造一下，使用<code>color</code>syntax 语法类型：</p><p>我们使用了<code>@property</code>语法，定义了两个 CSS Houdini 自定义变量<code>--houdini-colorA</code>和<code>--houdini-colorB</code>，在 hover 变化的时候，改变这两个颜色。</p><p>需要关注的是，我们设定的过渡语句<code>transition: 1s --houdini-colorA, 1s --houdini-colorB</code>，在这里，<strong>我们是针对 CSS Houdini 自定义变量设定过渡，而不是针对<code>background</code>设定过渡动画</strong>，再看看这次的效果：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1667457500-4c319c39c2124e2.gif" alt="过渡动画"></p><p>完整代码：</p><p>CSS <code>@property</code> 规则的强大之处在于，很多以往无法使用 CSS 进行动画的效果，如今，借助它都可以实现！</p><h2 id="layer" tabindex="-1">@layer <a class="header-anchor" href="#layer" aria-label="Permalink to &quot;@layer&quot;">​</a></h2><p><code>@layer</code>可谓是 CSS 圈 2022 年最受瞩目的新特性。</p><p>它的出现，目的在于让大型项目中的 CSS 文件及内容，可以得到更好的控制和管理。</p><p>CSS @layer 从<a href="https://www.mybj123.com/gohref.php?url=https://www.w3.org/TR/css-cascade-5/#at-layer" target="_blank" rel="noreferrer">CSS Cascading and Inheritance Level 5</a>被规范定义。</p><p>何为 CSS @layer？简单而言，CSS<a href="https://www.mybj123.com/gohref.php?url=https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule" target="_blank" rel="noreferrer">@规则</a>中的@layer声明了一个 级联层， 同一层内的规则将级联在一起， 这给予了开发者对层叠机制的更多控制。</p><p>语法也非常简单，看这样一个例子：</p><p>这样，我们就创建一个名为 utilities 的 @layer 级联层。</p><p>@layer 级联层如何使用呢？</p><h3 id="通过-layer-级联层管理样式优先级" tabindex="-1">通过 @layer 级联层管理样式优先级 <a class="header-anchor" href="#通过-layer-级联层管理样式优先级" aria-label="Permalink to &quot;通过 @layer 级联层管理样式优先级&quot;">​</a></h3><p><strong>@layer 级联层最大的功能，就是用于控制不同样式之间的优先级</strong>。</p><p>看下面这样一个例子，我们定义了两个 @layer 级联层 A 和 B：</p><p>由于<code>@layer B</code>的顺序排在<code>@layer A</code>之后，所以<code>@layer B</code>内的所有样式优先级都会比<code>@layer A</code>高，最终 div 的颜色为<code>green</code>：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1667457726-583bea96c38f6d2.png" alt="div 的颜色为green"></p><p>当然，如果页面内的 <code>@layer</code> 太多，可能不太好记住所有 @layer 的顺序，因此，还有这样一种写法。</p><p>我们可以同时命名多个 <code>@layer</code> 层，其后再补充其中的样式规则。</p><p>上述代码，我们首先定义了<code>@layer B, C, A</code>三个 <code>@layer</code> 级联层。而后再后面的 CSS 代码中补充了每个级联层的 CSS 代码，但是样式的优先级为：</p><p><strong>A</strong>&gt;<strong>C</strong>&gt;<strong>B</strong></p><p>因此，最终的 div 的颜色值为 <code>@layer</code> A 中定义的颜色，为<code>blue</code>：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1667457809-773969c56178cbf.png" alt="div 的颜色值为blue"></p><p>到这里，CSS @layer 的作用可以清晰的被窥见。</p><p><strong>利用 CSS @layer，我们可以将 CSS 不同模块划入不同的 @layer 中，利用先后顺序，非常好的去控制全局的样式优先级</strong>。</p><p>CSS @layer 的诞生，让我们有能力更好的划分页面的样式层级，更好的处理内部样式与外部引用样式的优先级顺序，属于比较重大的一次革新。</p><h2 id="container容器查询" tabindex="-1">@container容器查询 <a class="header-anchor" href="#container容器查询" aria-label="Permalink to &quot;@container容器查询&quot;">​</a></h2><p><code>@container</code>：提供了一种，基于容器的可用宽度来改变布局的方式。</p><p>容器查询也是一个非常新且重要的特性，弥补了过往媒体查询的不足。</p><p>在之前，响应式有这么个掣肘。同一 DOM 的不同布局形态如果想要变化，需要依赖诸如<strong>媒体查询</strong>来实现。</p><p>像是这样：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1667457933-a99a57280722a07.gif" alt="@container容器查询"></p><p>通过浏览器视窗大小的变化，借助媒体查询，实现不一样的布局。</p><p>但是，在现如今，大部分 PC 端页面使用的是基于 Flex/Grid 的弹性布局。</p><p>很多时候，当内容数不确定的时候，即便是相同的浏览器视窗宽度下，元素的布局及宽度可能也是不一致的。</p><p>考虑下面这种情况：</p><p>效果如下：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1667458028-9585d78695e40fc.png" alt="基于 Flex/Grid 的弹性布局"></p><p>这种情况下，如果需要在不同宽度下对最后一个元素做一下处理，传统方式还是比较麻烦的。</p><p>在这种情况下，容器查询（CSS Container Queries）就应运而生了！</p><h3 id="容器查询的能力" tabindex="-1">容器查询的能力 <a class="header-anchor" href="#容器查询的能力" aria-label="Permalink to &quot;容器查询的能力&quot;">​</a></h3><p>容器查询它给予了 CSS，在不改变浏览器视口宽度的前提下，只是根据容器的宽度变化，对布局做成调整的能力。</p><p>还是上面的例子，简单的代码示意：</p><p>像是这样，我们通过<code>resize: horizontal</code>来模拟单个容器的宽度变化，在这种情况下，容器查询能够做到在不同宽度下，改变容器内部的布局。</p><p>这样，就简单实现了一个容器查询功能：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1667458117-58ad4a297e1f55e.gif" alt="容器查询功能"></p><p>注意，仔细和上面的例子作对比，这里，<strong>浏览器的视口宽度是没有变化的，变化的只是容器的宽度！</strong></p><p>媒体查询与容器查询的异同，通过一张简单的图看看，核心的点在于容器的宽度发生变化时，视口的宽度不一定会发生变化：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1667458234-db197c633d0a28d.png" alt="媒体查询与容器查询的异同"></p><p>我们简单拆解下上述的代码，非常好理解。</p><ol><li>在<code>.warp</code>的样式中，通过<code>container-name: wrap</code>注册一个容器</li><li>注册完容器之后，便可以通过<code>@container wrap ()</code>容器查询语法，在内部写入不同情况下的另外一套样式</li><li>这里<code>@container wrap (max-width: 400px) {}</code>的意思便是，当<code>.wrap</code>容器的宽度小于 400 px 时，采用内部定义的样式，否则，使用外部默认的样式</li></ol><p>关于容器查询更为具体的语法，我建议还是上 MDN 或者规范详细看看 —<a href="https://www.mybj123.com/gohref.php?url=https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries" target="_blank" rel="noreferrer">MDN — CSS Container Queries</a></p><h2 id="scroll-timeline" tabindex="-1">@scroll-timeline <a class="header-anchor" href="#scroll-timeline" aria-label="Permalink to &quot;@scroll-timeline&quot;">​</a></h2><p><code>@scroll-timeline</code>能够设定一个动画的开始和结束由滚动容器内的滚动进度决定，而不是由时间决定。</p><p>意思是，我们可以定义一个动画效果，该动画的开始和结束可以通过容器的滚动来进行控制。</p><p>利用它，我们可以使用纯 CSS 实现页面滚动与 CSS 动画的结合。</p><p>遗憾的是，这个如此好的特性，最近已经被规范废弃，已经不再推荐使用了：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/11/1667458771-e20d60422307018.png" alt="@scroll-timeline"></p><p>意思是，即便目前有一些浏览器已经支持了<code>@scroll-timeline</code>，但是它很快又将要退出历史舞台。不再建议再使用这个 at-rule 规则。</p><blockquote><p>这里，<code>@scroll-timeline</code>虽然被废弃了，但是 CSS 将会换一种实现方式卷土重来。</p></blockquote><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>到这里，其实还有几个非常冷门且不太实用的 at-rule 规则，譬如：</p><ul><li><code>@color-profile</code>：允许定义并命名一个颜色配置文件</li><li><code>@font-feature-values</code>：主要是相对字体功能的拓展</li></ul><p>能够搜集到资料太少，文档也相对简陋，目前实用的场景太少，就不详细展开。</p><p>综上，可以看到，整个 at-rule 家族还是非常强大的，引入了非常多新的特性及功能，让 CSS 生态愈发强大。让 CSS 可以做到的事情越来越多，我们也有理由期待未来 CSS 会在 Web 领域扮演愈发重要的角色。</p>',220),a=[c];function d(s,l,i,n,u,h){return o(),r("div",null,a)}const f=e(p,[["render",d]]);export{S as __pageData,f as default};
