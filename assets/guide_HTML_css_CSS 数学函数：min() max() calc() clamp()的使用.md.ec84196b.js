import{_ as a,o as e,c,N as o}from"./chunks/framework.60272d8a.js";const b=JSON.parse('{"title":"CSS 数学函数：min() max() calc() clamp()的使用","description":"","frontmatter":{},"headers":[],"relativePath":"guide/HTML&css/CSS 数学函数：min() max() calc() clamp()的使用.md","lastUpdated":1706686109000}'),d={name:"guide/HTML&css/CSS 数学函数：min() max() calc() clamp()的使用.md"},p=o('<h1 id="css-数学函数-min-max-calc-clamp-的使用" tabindex="-1">CSS 数学函数：min() max() calc() clamp()的使用 <a class="header-anchor" href="#css-数学函数-min-max-calc-clamp-的使用" aria-label="Permalink to &quot;CSS 数学函数：min() max() calc() clamp()的使用&quot;">​</a></h1><blockquote><h2 id="excerpt" tabindex="-1">Excerpt <a class="header-anchor" href="#excerpt" aria-label="Permalink to &quot;Excerpt&quot;">​</a></h2><p>今天来看看 CSS 中的数学函数。CSS 数学函数允许在 CSS 属性值中执行数学表达式。CSS ...</p></blockquote><hr><p>今天来看看 CSS 中的数学函数。CSS 数学函数允许在 CSS 属性值中执行数学表达式。CSS 数学函数仅支持加法（+）、减法（-）、乘法（*）、除法（/）。目前在 CSS 中有四个得到很好支持的数学函数：</p><ul><li><code>min()</code>：该函数允许你从逗号分隔符表达式中选择一个最小值作为 CSS 的属性值；</li><li><code>max()</code>：该函数可以从一个逗号分隔的表达式列表中选择最大（正方向）的值作为属性的值；</li><li><code>calc()</code>：该函数允许在声明 CSS 属性值时执行一些计算；</li><li><code>clamp()</code>：该函数的作用是把一个值限制在一个上限和下限之间，当这个值超过最小值和最大值的范围时，在最小值和最大值之间选择一个值使用。它接收三个参数：最小值、首选值、最大值。</li></ul><p>这些 CSS 函数可能会以意想不到的方式使用，例如在渐变和颜色函数中以及与 CSS 自定义属性结合使用。下面就来看看这四个CSS函数！</p><h2 id="_1-calc" tabindex="-1">1. calc() <a class="header-anchor" href="#_1-calc" aria-label="Permalink to &quot;1\\. calc()&quot;">​</a></h2><h3 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h3><p>calc() 函数有助于在 CSS 属性值中执行计算。它可以用在如下属性中：<code>length</code>、<code>frequency</code>、<code>angle</code>、<code>time</code>、<code>percentage</code>、<code>number</code>、<code>integer</code>。</p><p>关于calc()更详细的学习，请看我这篇文章：《<a href="https://www.mybj123.com/58.html" target="_blank" rel="noreferrer">css3 calc()属性介绍以及自适应布局使用方法</a>》</p><p><code>calc()</code>函数用一个表达式作为它的参数，用这个表达式的结果作为值。这个表达式可以是任何如下操作符的组合（<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>），采用标准操作符处理法则的简单表达式。表达式中的运算对象可以使用任意长度的值。如果你愿意，甚至可以在一个表达式中混用这类值的不同单位。在需要时，还可以使用小括号来建立计算顺序。</p><p>该函数具有广泛的用途，例如，如果希望某些内容占据大部分视口高度。这时就可以使用相对的单位vh和绝对单位px进行混合计算：</p><p>当视口大小发生变化或者用户使用较大或较小的设备时，100vh的值将动态更新，因此计算也将动态更新。使用<code>calc()</code>的好处在于，它既可以避免添加一些 magic number，也可以避免使用 JavaScript 来计算样式的属性值。</p><h3 id="生成调色板" tabindex="-1">生成调色板 <a class="header-anchor" href="#生成调色板" aria-label="Permalink to &quot;生成调色板&quot;">​</a></h3><p>我们可以通过传入CSS自定义属性来扩展<code>calc()</code>的功能。一个非常有用的例子就是使用<code>hsl()</code>（表示色调、饱和度和亮度）来创建一致的调色板。给定饱和度、亮度和起始色调的值，就可以使用 calc() 函数计算互补值来构建完整的调色板。</p><p>生成的调色板：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/03/1648603979-0b70bc0c4393cc8.png" alt="生成的调色板"></p><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><p>在使用<code>calc()</code>函数时需要注意：</p><ul><li>「<strong>+ 和 – 运算符的两边必须要有空白字符。</strong>」比如，<code>calc(50% -8px)</code>会被解析成为一个无效的表达式，解析结果是：一个百分比 后跟一个负数长度值。而加有空白字符的、有效的表达式<code>calc(8px + -50%)</code>会被解析成为：一个长度 后跟一个加号 再跟一个负百分比。</li><li>和 / 这两个运算符前后不需要空白字符，但如果考虑到统一性，仍然推荐加上空白符。</li><li>用 0 作除数会使 HTML 解析器抛出异常。</li><li>涉及自动布局和固定布局的表格中的表列、表列组、表行、表行组和表单元格的宽度和高度百分比的数学表达式，auto 可视为已指定。</li><li><code>calc()</code>函数支持嵌套，但支持的方式是：把被嵌套的 <code>calc()</code> 函数全当成普通的括号。所以，函数内直接用括号就好了。</li></ul><h3 id="浏览器兼容性" tabindex="-1">浏览器兼容性 <a class="header-anchor" href="#浏览器兼容性" aria-label="Permalink to &quot;浏览器兼容性&quot;">​</a></h3><p><code>clac()</code> 函数在这四个函数中具有最好的跨浏览器支持：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/03/1648604129-b23a0ca984914c1.png" alt="浏览器兼容性"> <img src="https://media.mybj123.com/wp-content/uploads/2022/03/1648604135-543ab01db1cce35.png" alt="浏览器兼容性"> <img src="https://media.mybj123.com/wp-content/uploads/2022/03/1648604141-de063465248ac22.png" alt="浏览器兼容性"></p><h2 id="_2-clamp" tabindex="-1">2. clamp() <a class="header-anchor" href="#_2-clamp" aria-label="Permalink to &quot;2\\. clamp()&quot;">​</a></h2><h3 id="基本使用-1" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用-1" aria-label="Permalink to &quot;基本使用&quot;">​</a></h3><p><code>clamp()</code> 的实际用途：在可接受的值范围内设置边界。<code>clamp()</code>被用在<code>length</code>、<code>frequency</code>、<code>angle</code>、<code>time</code>、<code>percentage</code>、<code>number</code>、<code>integer</code>属性中。其语法如下：</p><p><code>clamp(MIN, VAL, MAX)</code> 其实就是表示 <code>max(MIN, min(VAL, MAX))</code>。<code>clamp()</code> 函数接收三个用逗号分隔的表达式作为参数，按最小值、首选值、最大值的顺序排列，这三个值的顺序很重要。</p><ul><li>当首选值比最小值要小时，则使用最小值；</li><li>当首选值介于最小值和最大值之间时，用首选值；</li><li>当首选值比最大值要大时，则使用最大值。</li></ul><p>这个表达式可以是数学函数、字面量或其它计算为有效的参数类型表达式，如 <code>attr()</code>，或嵌套的 min 和 max 。作为数学表达式，可以使用加减乘除运算而无需使用 <code>calc()</code> 函数。也可以用括号来确定计算顺序。表达式中的每一个值都可以用不同的单位。</p><p>来看下面的例子：</p><p>有一个元素，其最小宽度为200px，首选值为50%，最大值为1000px。</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/03/1648604353-6f2b9d7f5d18417.png" alt="clamp()基本使用"></p><p>这个元素的宽度永远不会低于200px，首选值是50%并且仅在视口宽度大于400px和小于2000px 时才有效，宽度不会超过1000px。</p><p>那<code>clamp()</code>是如何计算的呢？当<code>clamp()</code>用作值时，它等同于使用<code>max()</code>和<code>min()</code>函数：</p><p>这里的50%取决于浏览器视口宽度，假设视口宽度为1150px，解析的过程如下：</p><h3 id="字体大小" tabindex="-1">字体大小 <a class="header-anchor" href="#字体大小" aria-label="Permalink to &quot;字体大小&quot;">​</a></h3><p><img src="https://media.mybj123.com/wp-content/uploads/2022/03/1648604507-b5151965f5ae349.png" alt="字体大小"></p><p>假设需要要一个最小为16px，最大为50px的标题。<code>clamp()</code>函数将给出一个介于两者之间的值，而不会低于最小值或超过最大值。</p><p>在这里使用<code>clamp()</code>就非常完美，因为它可以确保使用的字体大小易于访问和阅读。如果要使用<code>min()</code>设置最大字体，就无法在小视口中控制字体。</p><p>效果如下：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/03/1648604592-e5e35c46d0d36ae.png" alt="使用min()设置最大字体，就无法在小视口中控制字体"></p><p>在移动视口中，字体很小。因此，不要只对字体大小使<code>min()</code>函数。当然，也可以通过媒体查询来取消或添加它。正如上面所说的，可以在<code>max()</code>函数中嵌套一个<code>min()</code>，这将模拟<code>clamp()</code>函数：</p><h3 id="边框和阴影" tabindex="-1">边框和阴影 <a class="header-anchor" href="#边框和阴影" aria-label="Permalink to &quot;边框和阴影&quot;">​</a></h3><p>有时需要边框宽度和半径应该在移动设备上更小，通过使用<code>clamp()</code>就可以根据视口宽度来使它们动态变化。</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/03/1648604719-58e2be79df2a883.png" alt="使用clamp()动态控制边框和阴影大小变化"> <img src="https://media.mybj123.com/wp-content/uploads/2022/03/1648604723-f15e62b7ed328e8.png" alt="使用clamp()动态控制边框和阴影大小变化"></p><h3 id="grid-间隙" tabindex="-1">Grid 间隙 <a class="header-anchor" href="#grid-间隙" aria-label="Permalink to &quot;Grid 间隙&quot;">​</a></h3><p>当使用 CSS Grid 布局时设置网格间隙，并且希望为移动视口缩小间隙。就可以使用<code>clamp()</code>：</p><p>效果如下：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/03/1648604879-306d7e78aaa0966.png" alt="使用clamp()设置Grid 间隙"></p><h3 id="注意事项-1" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项-1" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li>允许设置表达式的值为<code>max()</code>和<code>min()</code>。这些表达式是数学表达式，所以你可以进行加减乘除运算。</li><li>表达式可以是使用标准运算符优先规则组合 + 、- 、* 、/ 等运算符的值，确保在 + 、- 两侧各有一个空格。表达式中的操作数可以是长度值。可以给每一个值设置不同的单位。还可以用括号来确定计算顺序。</li></ul><h3 id="浏览器兼容性-1" tabindex="-1">浏览器兼容性 <a class="header-anchor" href="#浏览器兼容性-1" aria-label="Permalink to &quot;浏览器兼容性&quot;">​</a></h3><p><img src="https://media.mybj123.com/wp-content/uploads/2022/03/1648604969-ff92f592cd2e1e7.png" alt="clamp()浏览器兼容性"></p><h2 id="_3-min" tabindex="-1">3. min() <a class="header-anchor" href="#_3-min" aria-label="Permalink to &quot;3\\. min()&quot;">​</a></h2><h3 id="基本使用-2" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用-2" aria-label="Permalink to &quot;基本使用&quot;">​</a></h3><p><code>min()</code>函数方法接受一个或多个用逗号分隔的表达式作为他的参数，数值最小的表达式的值将会作为指定的属性的值。</p><p><code>min()</code>的实际用途：以包含元素响应上下文的方式，在最大允许值上设置边界。尽管是<code>min()</code>函数，但结果是提供的值将作为属性允许的最大值。</p><p>下面来看一个简单的例子，希望元素的最大宽度为500px：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/03/1648605061-52345b3558889d2.png" alt="min()基本使用"></p><p>浏览器必须选择最小的值（50%，500px）。选择该选项取决于视口宽度。如果50%的计算值大于500px，那么它将被忽略，而使用500px。否则，如果50%的计算值小于500px，则50%将用作宽度值。视口宽度为1000px：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/03/1648605175-a345d95febfe0b7.png" alt="min()使用"></p><h3 id="容器宽度" tabindex="-1">容器宽度 <a class="header-anchor" href="#容器宽度" aria-label="Permalink to &quot;容器宽度&quot;">​</a></h3><p>有一个容器的宽度是其父级宽度的80%，并且宽度不应超过780px，那么该如何写：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/03/1648605293-c83c4fd8f0af11b.png" alt="容器的宽度是其父级宽度的80%，并且宽度不应超过780px"></p><p>如果使用<code>min()</code>函数，就可以这样设置最大值，代码简洁了很多：</p><h3 id="平滑渐变" tabindex="-1">平滑渐变 <a class="header-anchor" href="#平滑渐变" aria-label="Permalink to &quot;平滑渐变&quot;">​</a></h3><p>在 CSS 中使用渐变时，可能需要通过使颜色之间的过渡更平滑一些来针对移动设备进行一些调整。来看一个例子：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/03/1648605394-c23d041357e3f13.png" alt="平滑渐变"></p><p>在移动设备中，这个颜色渐变就会有一条分割线，不是很好看。可以通过媒体查询来解决这个问题：</p><p>虽然这样是可行的，但我们可以使用CSS 中的 <code>min()</code> 函数使这个颜色渐变更加动态：</p><p>这样颜色渐变就看起来顺滑了很多：</p><p><img src="https://media.mybj123.com/wp-content/uploads/2022/03/1648605525-88859b6e053fe60.png" alt="CSS 中的 min() 函数使这个颜色渐变更加动态"></p><h3 id="注意事项-2" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项-2" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li>表达式中的操作数可以是任何长度值。表达式中的每个值可以使用不同的单位。必要时，还可以使用括号来确定计算顺序；</li><li>通常需要组合<code>min()</code>和<code>max()</code>的值，或者在<code>clamp()</code>或<code>calc()</code>函数中使用<code>min()</code>；</li><li>如果需要应用多个长度约束，则可以提供两个以上的参数。</li></ul><h3 id="浏览器兼容性-2" tabindex="-1">浏览器兼容性 <a class="header-anchor" href="#浏览器兼容性-2" aria-label="Permalink to &quot;浏览器兼容性&quot;">​</a></h3><p><img src="https://media.mybj123.com/wp-content/uploads/2022/03/1648605612-4147f08b0a89219.png" alt="min浏览器兼容性"></p><h2 id="_4-max" tabindex="-1">4. max() <a class="header-anchor" href="#_4-max" aria-label="Permalink to &quot;4\\. max()&quot;">​</a></h2><h3 id="基本使用-3" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用-3" aria-label="Permalink to &quot;基本使用&quot;">​</a></h3><p><code>max()</code>函数方法接受一个或多个用逗号分隔的表达式作为他的参数，数值最大的表达式的值将会作为指定的属性的值。</p><p><code>max()</code>的实际用途：以包含元素响应上下文的方式，在最小允许值上设置边界。</p><p>下面来看一个简单的例子，通常，页面的侧边栏有一个固定的宽度，而主宽度是灵活大小的。如果视口足够大，可以使侧边栏更具动态性以占用更多空间。为此，需要使用 max() 函数为其设置**「最小宽度。」**</p><p>侧边栏的最小宽度为150px，如果视口宽度大于500px（500*30%=150），则最小宽度为30vw。</p><h3 id="浏览器兼容性-3" tabindex="-1">浏览器兼容性 <a class="header-anchor" href="#浏览器兼容性-3" aria-label="Permalink to &quot;浏览器兼容性&quot;">​</a></h3><p><img src="https://media.mybj123.com/wp-content/uploads/2022/03/1648605722-a01fb88d4d513ee.png" alt="max()浏览器兼容性"></p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>以上就是关于CSS 数学函数：<code>min()</code>、<code>max()</code>、<code>calc()</code>、<code>clamp()</code>的相关学习，你学会了吗？</p>',86),l=[p];function t(i,m,n,r,h,s){return e(),c("div",null,l)}const x=a(d,[["render",t]]);export{b as __pageData,x as default};
